
elmo-aes-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001100  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08001288  08001288  00011288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016ac  080016ac  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080016ac  080016ac  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016ac  080016ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016ac  080016ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080016b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000004  080016b8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000042c  080016b8  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036bc  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ca5  00000000  00000000  000236e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001e4d  00000000  00000000  0002438d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  000261e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002c8  00000000  00000000  00026458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023f0  00000000  00000000  00026720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000e78  00000000  00000000  00028b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  00029988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000618  00000000  00000000  000299a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00029fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0002a104  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line_str 00000046  00000000  00000000  0002a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <starttrigger>:
 8000188:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800018a:	24e0      	movs	r4, #224	; 0xe0
 800018c:	0624      	lsls	r4, r4, #24
 800018e:	2504      	movs	r5, #4
 8000190:	406c      	eors	r4, r5
 8000192:	2501      	movs	r5, #1
 8000194:	6025      	str	r5, [r4, #0]
 8000196:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000198:	4770      	bx	lr

0800019a <endtrigger>:
 800019a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800019c:	24e0      	movs	r4, #224	; 0xe0
 800019e:	0624      	lsls	r4, r4, #24
 80001a0:	2504      	movs	r5, #4
 80001a2:	406c      	eors	r4, r5
 80001a4:	2500      	movs	r5, #0
 80001a6:	6025      	str	r5, [r4, #0]
 80001a8:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001aa:	4770      	bx	lr

080001ac <readbyte>:
 80001ac:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001ae:	24e1      	movs	r4, #225	; 0xe1
 80001b0:	0624      	lsls	r4, r4, #24
 80001b2:	6821      	ldr	r1, [r4, #0]
 80001b4:	7001      	strb	r1, [r0, #0]
 80001b6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001b8:	4770      	bx	lr

080001ba <randbyte>:
 80001ba:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001bc:	24e1      	movs	r4, #225	; 0xe1
 80001be:	0624      	lsls	r4, r4, #24
 80001c0:	2504      	movs	r5, #4
 80001c2:	406c      	eors	r4, r5
 80001c4:	6821      	ldr	r1, [r4, #0]
 80001c6:	7001      	strb	r1, [r0, #0]
 80001c8:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001ca:	4770      	bx	lr

080001cc <getstart>:
 80001cc:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001ce:	24e1      	movs	r4, #225	; 0xe1
 80001d0:	0624      	lsls	r4, r4, #24
 80001d2:	2508      	movs	r5, #8
 80001d4:	406c      	eors	r4, r5
 80001d6:	6821      	ldr	r1, [r4, #0]
 80001d8:	6001      	str	r1, [r0, #0]
 80001da:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001dc:	4770      	bx	lr

080001de <getruncount>:
 80001de:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001e0:	24e1      	movs	r4, #225	; 0xe1
 80001e2:	0624      	lsls	r4, r4, #24
 80001e4:	250c      	movs	r5, #12
 80001e6:	406c      	eors	r4, r5
 80001e8:	6821      	ldr	r1, [r4, #0]
 80001ea:	6001      	str	r1, [r0, #0]
 80001ec:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001ee:	4770      	bx	lr

080001f0 <printgroup>:
 80001f0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001f2:	24e0      	movs	r4, #224	; 0xe0
 80001f4:	0624      	lsls	r4, r4, #24
 80001f6:	3401      	adds	r4, #1
 80001f8:	7805      	ldrb	r5, [r0, #0]
 80001fa:	6025      	str	r5, [r4, #0]
 80001fc:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001fe:	4770      	bx	lr

08000200 <printbyte>:
 8000200:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000202:	24e0      	movs	r4, #224	; 0xe0
 8000204:	0624      	lsls	r4, r4, #24
 8000206:	7805      	ldrb	r5, [r0, #0]
 8000208:	6025      	str	r5, [r4, #0]
 800020a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800020c:	4770      	bx	lr

0800020e <endprogram>:
 800020e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000210:	24f0      	movs	r4, #240	; 0xf0
 8000212:	0624      	lsls	r4, r4, #24
 8000214:	2500      	movs	r5, #0
 8000216:	6025      	str	r5, [r4, #0]
 8000218:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800021a:	4770      	bx	lr

0800021c <initialisemaskflow>:
 800021c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800021e:	24e0      	movs	r4, #224	; 0xe0
 8000220:	0624      	lsls	r4, r4, #24
 8000222:	2540      	movs	r5, #64	; 0x40
 8000224:	406c      	eors	r4, r5
 8000226:	6020      	str	r0, [r4, #0]
 8000228:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800022a:	4770      	bx	lr

0800022c <resetmaskflow>:
 800022c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800022e:	24e0      	movs	r4, #224	; 0xe0
 8000230:	0624      	lsls	r4, r4, #24
 8000232:	2542      	movs	r5, #66	; 0x42
 8000234:	406c      	eors	r4, r5
 8000236:	2500      	movs	r5, #0
 8000238:	6025      	str	r5, [r4, #0]
 800023a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800023c:	4770      	bx	lr

0800023e <setmaskflowstart>:
 800023e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000240:	24e0      	movs	r4, #224	; 0xe0
 8000242:	0624      	lsls	r4, r4, #24
 8000244:	2544      	movs	r5, #68	; 0x44
 8000246:	406c      	eors	r4, r5
 8000248:	6020      	str	r0, [r4, #0]
 800024a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800024c:	4770      	bx	lr

0800024e <resetdatafile>:
 800024e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000250:	24e0      	movs	r4, #224	; 0xe0
 8000252:	0624      	lsls	r4, r4, #24
 8000254:	2546      	movs	r5, #70	; 0x46
 8000256:	406c      	eors	r4, r5
 8000258:	2500      	movs	r5, #0
 800025a:	6025      	str	r5, [r4, #0]
 800025c:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800025e:	4770      	bx	lr

08000260 <__gnu_thumb1_case_uqi>:
 8000260:	b402      	push	{r1}
 8000262:	4671      	mov	r1, lr
 8000264:	0849      	lsrs	r1, r1, #1
 8000266:	0049      	lsls	r1, r1, #1
 8000268:	5c09      	ldrb	r1, [r1, r0]
 800026a:	0049      	lsls	r1, r1, #1
 800026c:	448e      	add	lr, r1
 800026e:	bc02      	pop	{r1}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivsi3>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d034      	beq.n	80002e2 <.udivsi3_skip_div0_test+0x6a>

08000278 <.udivsi3_skip_div0_test>:
 8000278:	2301      	movs	r3, #1
 800027a:	2200      	movs	r2, #0
 800027c:	b410      	push	{r4}
 800027e:	4288      	cmp	r0, r1
 8000280:	d32c      	bcc.n	80002dc <.udivsi3_skip_div0_test+0x64>
 8000282:	2401      	movs	r4, #1
 8000284:	0724      	lsls	r4, r4, #28
 8000286:	42a1      	cmp	r1, r4
 8000288:	d204      	bcs.n	8000294 <.udivsi3_skip_div0_test+0x1c>
 800028a:	4281      	cmp	r1, r0
 800028c:	d202      	bcs.n	8000294 <.udivsi3_skip_div0_test+0x1c>
 800028e:	0109      	lsls	r1, r1, #4
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	e7f8      	b.n	8000286 <.udivsi3_skip_div0_test+0xe>
 8000294:	00e4      	lsls	r4, r4, #3
 8000296:	42a1      	cmp	r1, r4
 8000298:	d204      	bcs.n	80002a4 <.udivsi3_skip_div0_test+0x2c>
 800029a:	4281      	cmp	r1, r0
 800029c:	d202      	bcs.n	80002a4 <.udivsi3_skip_div0_test+0x2c>
 800029e:	0049      	lsls	r1, r1, #1
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	e7f8      	b.n	8000296 <.udivsi3_skip_div0_test+0x1e>
 80002a4:	4288      	cmp	r0, r1
 80002a6:	d301      	bcc.n	80002ac <.udivsi3_skip_div0_test+0x34>
 80002a8:	1a40      	subs	r0, r0, r1
 80002aa:	431a      	orrs	r2, r3
 80002ac:	084c      	lsrs	r4, r1, #1
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d302      	bcc.n	80002b8 <.udivsi3_skip_div0_test+0x40>
 80002b2:	1b00      	subs	r0, r0, r4
 80002b4:	085c      	lsrs	r4, r3, #1
 80002b6:	4322      	orrs	r2, r4
 80002b8:	088c      	lsrs	r4, r1, #2
 80002ba:	42a0      	cmp	r0, r4
 80002bc:	d302      	bcc.n	80002c4 <.udivsi3_skip_div0_test+0x4c>
 80002be:	1b00      	subs	r0, r0, r4
 80002c0:	089c      	lsrs	r4, r3, #2
 80002c2:	4322      	orrs	r2, r4
 80002c4:	08cc      	lsrs	r4, r1, #3
 80002c6:	42a0      	cmp	r0, r4
 80002c8:	d302      	bcc.n	80002d0 <.udivsi3_skip_div0_test+0x58>
 80002ca:	1b00      	subs	r0, r0, r4
 80002cc:	08dc      	lsrs	r4, r3, #3
 80002ce:	4322      	orrs	r2, r4
 80002d0:	2800      	cmp	r0, #0
 80002d2:	d003      	beq.n	80002dc <.udivsi3_skip_div0_test+0x64>
 80002d4:	091b      	lsrs	r3, r3, #4
 80002d6:	d001      	beq.n	80002dc <.udivsi3_skip_div0_test+0x64>
 80002d8:	0909      	lsrs	r1, r1, #4
 80002da:	e7e3      	b.n	80002a4 <.udivsi3_skip_div0_test+0x2c>
 80002dc:	0010      	movs	r0, r2
 80002de:	bc10      	pop	{r4}
 80002e0:	4770      	bx	lr
 80002e2:	b501      	push	{r0, lr}
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f80b 	bl	8000300 <__aeabi_idiv0>
 80002ea:	bd02      	pop	{r1, pc}

080002ec <__aeabi_uidivmod>:
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d0f8      	beq.n	80002e2 <.udivsi3_skip_div0_test+0x6a>
 80002f0:	b503      	push	{r0, r1, lr}
 80002f2:	f7ff ffc1 	bl	8000278 <.udivsi3_skip_div0_test>
 80002f6:	bc0e      	pop	{r1, r2, r3}
 80002f8:	4342      	muls	r2, r0
 80002fa:	1a89      	subs	r1, r1, r2
 80002fc:	4718      	bx	r3
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__aeabi_idiv0>:
 8000300:	4770      	bx	lr
 8000302:	46c0      	nop			; (mov r8, r8)

08000304 <__do_global_dtors_aux>:
 8000304:	b510      	push	{r4, lr}
 8000306:	4c06      	ldr	r4, [pc, #24]	; (8000320 <__do_global_dtors_aux+0x1c>)
 8000308:	7823      	ldrb	r3, [r4, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d107      	bne.n	800031e <__do_global_dtors_aux+0x1a>
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <__do_global_dtors_aux+0x20>)
 8000310:	2b00      	cmp	r3, #0
 8000312:	d002      	beq.n	800031a <__do_global_dtors_aux+0x16>
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <__do_global_dtors_aux+0x24>)
 8000316:	e000      	b.n	800031a <__do_global_dtors_aux+0x16>
 8000318:	bf00      	nop
 800031a:	2301      	movs	r3, #1
 800031c:	7023      	strb	r3, [r4, #0]
 800031e:	bd10      	pop	{r4, pc}
 8000320:	20000410 	.word	0x20000410
 8000324:	00000000 	.word	0x00000000
 8000328:	08001270 	.word	0x08001270

0800032c <frame_dummy>:
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <frame_dummy+0x14>)
 800032e:	b510      	push	{r4, lr}
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <frame_dummy+0x10>
 8000334:	4903      	ldr	r1, [pc, #12]	; (8000344 <frame_dummy+0x18>)
 8000336:	4804      	ldr	r0, [pc, #16]	; (8000348 <frame_dummy+0x1c>)
 8000338:	e000      	b.n	800033c <frame_dummy+0x10>
 800033a:	bf00      	nop
 800033c:	bd10      	pop	{r4, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	00000000 	.word	0x00000000
 8000344:	20000414 	.word	0x20000414
 8000348:	08001270 	.word	0x08001270

0800034c <KeyExpansion>:
    return sbox[num];
}

//key expansion
void KeyExpansion(uint8_t* Key)
{
 800034c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800034e:	4d20      	ldr	r5, [pc, #128]	; (80003d0 <KeyExpansion+0x84>)
 8000350:	0002      	movs	r2, r0
 8000352:	002b      	movs	r3, r5
 8000354:	3210      	adds	r2, #16
  uint8_t tempa[4];

  // The first round key
  for(i = 0; i < Nk; ++i)
  {
    roundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000356:	7801      	ldrb	r1, [r0, #0]
 8000358:	7019      	strb	r1, [r3, #0]
    roundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800035a:	7841      	ldrb	r1, [r0, #1]
 800035c:	7059      	strb	r1, [r3, #1]
    roundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800035e:	7881      	ldrb	r1, [r0, #2]
 8000360:	7099      	strb	r1, [r3, #2]
    roundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000362:	78c1      	ldrb	r1, [r0, #3]
  for(i = 0; i < Nk; ++i)
 8000364:	3004      	adds	r0, #4
    roundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000366:	70d9      	strb	r1, [r3, #3]
  for(i = 0; i < Nk; ++i)
 8000368:	3304      	adds	r3, #4
 800036a:	4290      	cmp	r0, r2
 800036c:	d1f3      	bne.n	8000356 <KeyExpansion+0xa>
 800036e:	2604      	movs	r6, #4
  // all the key for other key rounds
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      tempa[j]=roundKey[(i-1) * 4 + j];
 8000370:	0029      	movs	r1, r5
 8000372:	ac01      	add	r4, sp, #4
 8000374:	2204      	movs	r2, #4
 8000376:	0020      	movs	r0, r4
 8000378:	310c      	adds	r1, #12
 800037a:	f000 ff6f 	bl	800125c <memcpy>
    }

    if (i % Nk == 0)
 800037e:	2303      	movs	r3, #3
 8000380:	421e      	tst	r6, r3
 8000382:	d110      	bne.n	80003a6 <KeyExpansion+0x5a>
    return sbox[num];
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <KeyExpansion+0x88>)
    {
      {
        k = tempa[0];
 8000386:	7821      	ldrb	r1, [r4, #0]
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
 8000388:	78e0      	ldrb	r0, [r4, #3]
    return sbox[num];
 800038a:	7862      	ldrb	r2, [r4, #1]
 800038c:	78a7      	ldrb	r7, [r4, #2]
 800038e:	5c9a      	ldrb	r2, [r3, r2]
        tempa[3] = k;
      }

      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 8000390:	5ddf      	ldrb	r7, [r3, r7]
        tempa[2] = getSBoxValue(tempa[2]);
 8000392:	5c18      	ldrb	r0, [r3, r0]
        tempa[3] = getSBoxValue(tempa[3]);
 8000394:	5c5b      	ldrb	r3, [r3, r1]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000396:	08b1      	lsrs	r1, r6, #2
        tempa[3] = getSBoxValue(tempa[3]);
 8000398:	70e3      	strb	r3, [r4, #3]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <KeyExpansion+0x8c>)
        tempa[1] = getSBoxValue(tempa[1]);
 800039c:	7067      	strb	r7, [r4, #1]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800039e:	5c5b      	ldrb	r3, [r3, r1]
        tempa[2] = getSBoxValue(tempa[2]);
 80003a0:	70a0      	strb	r0, [r4, #2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 80003a2:	4053      	eors	r3, r2
 80003a4:	7023      	strb	r3, [r4, #0]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    roundKey[i * 4 + 0] = roundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 80003a6:	782b      	ldrb	r3, [r5, #0]
 80003a8:	7822      	ldrb	r2, [r4, #0]
  for(; (i < (Nb * (Nr + 1))); ++i)
 80003aa:	3601      	adds	r6, #1
    roundKey[i * 4 + 0] = roundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 80003ac:	4053      	eors	r3, r2
 80003ae:	742b      	strb	r3, [r5, #16]
    roundKey[i * 4 + 1] = roundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 80003b0:	7862      	ldrb	r2, [r4, #1]
 80003b2:	786b      	ldrb	r3, [r5, #1]
 80003b4:	4053      	eors	r3, r2
 80003b6:	746b      	strb	r3, [r5, #17]
    roundKey[i * 4 + 2] = roundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 80003b8:	78a2      	ldrb	r2, [r4, #2]
 80003ba:	78ab      	ldrb	r3, [r5, #2]
 80003bc:	4053      	eors	r3, r2
 80003be:	74ab      	strb	r3, [r5, #18]
    roundKey[i * 4 + 3] = roundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80003c0:	78e2      	ldrb	r2, [r4, #3]
 80003c2:	78eb      	ldrb	r3, [r5, #3]
  for(; (i < (Nb * (Nr + 1))); ++i)
 80003c4:	3504      	adds	r5, #4
    roundKey[i * 4 + 3] = roundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80003c6:	4053      	eors	r3, r2
 80003c8:	73eb      	strb	r3, [r5, #15]
  for(; (i < (Nb * (Nr + 1))); ++i)
 80003ca:	2e2c      	cmp	r6, #44	; 0x2c
 80003cc:	d1d0      	bne.n	8000370 <KeyExpansion+0x24>
  }

}
 80003ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80003d0:	20000014 	.word	0x20000014
 80003d4:	08001587 	.word	0x08001587
 80003d8:	08001488 	.word	0x08001488

080003dc <mixColumns>:
//  
//starttrigger();
 
    uint8_t temp[4];
    uint8_t i;
    for(i = 0; i < 16; i+=4){
 80003dc:	0003      	movs	r3, r0
void mixColumns(uint8_t state[16]){
 80003de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80003e0:	3310      	adds	r3, #16
        temp[1] = state[i+1];
        temp[2] = state[i+2];
        temp[3] = state[i+3];


        state[i]	=	mul_02[temp[0]]	^ mul_03[temp[1]]   ^       temp[2]     ^        temp[3];
 80003e2:	4c17      	ldr	r4, [pc, #92]	; (8000440 <mixColumns+0x64>)
 80003e4:	4e17      	ldr	r6, [pc, #92]	; (8000444 <mixColumns+0x68>)
 80003e6:	9301      	str	r3, [sp, #4]
        temp[2] = state[i+2];
 80003e8:	7887      	ldrb	r7, [r0, #2]
        temp[0] = state[i];
 80003ea:	7805      	ldrb	r5, [r0, #0]
        state[i]	=	mul_02[temp[0]]	^ mul_03[temp[1]]   ^       temp[2]     ^        temp[3];
 80003ec:	003a      	movs	r2, r7
        temp[1] = state[i+1];
 80003ee:	7843      	ldrb	r3, [r0, #1]
        temp[3] = state[i+3];
 80003f0:	78c1      	ldrb	r1, [r0, #3]
        temp[1] = state[i+1];
 80003f2:	9300      	str	r3, [sp, #0]
        state[i]	=	mul_02[temp[0]]	^ mul_03[temp[1]]   ^       temp[2]     ^        temp[3];
 80003f4:	5d63      	ldrb	r3, [r4, r5]
 80003f6:	404a      	eors	r2, r1
 80003f8:	405a      	eors	r2, r3
 80003fa:	9b00      	ldr	r3, [sp, #0]
 80003fc:	5cf3      	ldrb	r3, [r6, r3]
 80003fe:	405a      	eors	r2, r3
 8000400:	7002      	strb	r2, [r0, #0]
        state[i+1]	=	       temp[0]	^ mul_02[temp[1]]   ^mul_03[temp[2]]    ^        temp[3];
 8000402:	002a      	movs	r2, r5
 8000404:	9b00      	ldr	r3, [sp, #0]
 8000406:	404a      	eors	r2, r1
 8000408:	5ce3      	ldrb	r3, [r4, r3]
 800040a:	405a      	eors	r2, r3
 800040c:	5df3      	ldrb	r3, [r6, r7]
 800040e:	405a      	eors	r2, r3
 8000410:	7042      	strb	r2, [r0, #1]
        state[i+2]	=	       temp[0]	^        temp[1]    ^mul_02[temp[2]]    ^mul_03[temp[3]];
 8000412:	002a      	movs	r2, r5
 8000414:	9b00      	ldr	r3, [sp, #0]
 8000416:	405a      	eors	r2, r3
 8000418:	4694      	mov	ip, r2
 800041a:	4663      	mov	r3, ip
 800041c:	5de2      	ldrb	r2, [r4, r7]
 800041e:	405a      	eors	r2, r3
 8000420:	5c73      	ldrb	r3, [r6, r1]
 8000422:	405a      	eors	r2, r3
        state[i+3]	=	mul_03[temp[0]]	^        temp[1]    ^       temp[2]     ^mul_02[temp[3]];
 8000424:	9b00      	ldr	r3, [sp, #0]
        state[i+2]	=	       temp[0]	^        temp[1]    ^mul_02[temp[2]]    ^mul_03[temp[3]];
 8000426:	7082      	strb	r2, [r0, #2]
        state[i+3]	=	mul_03[temp[0]]	^        temp[1]    ^       temp[2]     ^mul_02[temp[3]];
 8000428:	5d72      	ldrb	r2, [r6, r5]
 800042a:	407b      	eors	r3, r7
 800042c:	4053      	eors	r3, r2
 800042e:	5c62      	ldrb	r2, [r4, r1]
 8000430:	4053      	eors	r3, r2
 8000432:	70c3      	strb	r3, [r0, #3]
    for(i = 0; i < 16; i+=4){
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	3004      	adds	r0, #4
 8000438:	4283      	cmp	r3, r0
 800043a:	d1d5      	bne.n	80003e8 <mixColumns+0xc>

    }
//endtrigger();
}
 800043c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	08001388 	.word	0x08001388
 8000444:	08001288 	.word	0x08001288

08000448 <shiftRows>:
void shiftRows(uint8_t state[16])
{
    uint8_t temp;
    //Row 2
    temp = state[1];
    state[1] = state[5];
 8000448:	7942      	ldrb	r2, [r0, #5]
    temp = state[1];
 800044a:	7843      	ldrb	r3, [r0, #1]
    state[1] = state[5];
 800044c:	7042      	strb	r2, [r0, #1]
    state[5] = state[9];
 800044e:	7a42      	ldrb	r2, [r0, #9]
 8000450:	7142      	strb	r2, [r0, #5]
    state[9] = state[13];
 8000452:	7b42      	ldrb	r2, [r0, #13]
    state[13] = temp;
 8000454:	7343      	strb	r3, [r0, #13]
    state[9] = state[13];
 8000456:	7242      	strb	r2, [r0, #9]
    //Row 3
    temp = state[10];
    state[10] = state[2];
 8000458:	7882      	ldrb	r2, [r0, #2]
    temp = state[10];
 800045a:	7a83      	ldrb	r3, [r0, #10]
    state[10] = state[2];
 800045c:	7282      	strb	r2, [r0, #10]
    state[2] = temp;
    temp = state[14];
    state[14] = state[6];
 800045e:	7982      	ldrb	r2, [r0, #6]
    state[2] = temp;
 8000460:	7083      	strb	r3, [r0, #2]
    temp = state[14];
 8000462:	7b83      	ldrb	r3, [r0, #14]
    state[14] = state[6];
 8000464:	7382      	strb	r2, [r0, #14]
    state[6] = temp;
    //Row 4
    temp = state[3];
    state[3] = state[15];
 8000466:	7bc2      	ldrb	r2, [r0, #15]
    state[6] = temp;
 8000468:	7183      	strb	r3, [r0, #6]
    temp = state[3];
 800046a:	78c3      	ldrb	r3, [r0, #3]
    state[3] = state[15];
 800046c:	70c2      	strb	r2, [r0, #3]
    state[15] = state[11];
 800046e:	7ac2      	ldrb	r2, [r0, #11]
 8000470:	73c2      	strb	r2, [r0, #15]
    state[11] = state[7];
 8000472:	79c2      	ldrb	r2, [r0, #7]
    state[7] = temp;
 8000474:	71c3      	strb	r3, [r0, #7]
    state[11] = state[7];
 8000476:	72c2      	strb	r2, [r0, #11]
    temp = 0;
}
 8000478:	4770      	bx	lr
 800047a:	0000      	movs	r0, r0

0800047c <addRoundKey_masked>:


void addRoundKey_masked(uint8_t state[16],uint8_t round){
	uint8_t i;
	for(i=0;i<16;i++){
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <addRoundKey_masked+0x1c>)
 800047e:	0109      	lsls	r1, r1, #4
 8000480:	18c9      	adds	r1, r1, r3
void addRoundKey_masked(uint8_t state[16],uint8_t round){
 8000482:	2300      	movs	r3, #0
 8000484:	b510      	push	{r4, lr}
		state[i] ^= RoundKey_masked[round][i];
 8000486:	5cc2      	ldrb	r2, [r0, r3]
 8000488:	5ccc      	ldrb	r4, [r1, r3]
 800048a:	4062      	eors	r2, r4
 800048c:	54c2      	strb	r2, [r0, r3]
	for(i=0;i<16;i++){
 800048e:	3301      	adds	r3, #1
 8000490:	2b10      	cmp	r3, #16
 8000492:	d1f8      	bne.n	8000486 <addRoundKey_masked+0xa>
	}
}
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	200000c4 	.word	0x200000c4

0800049c <remask>:
		state[i] = Sbox_masked[state[i]];
	}

}

void remask(uint8_t s[16], uint8_t m1, uint8_t m2, uint8_t m3, uint8_t m4, uint8_t m5, uint8_t m6, uint8_t m7, uint8_t m8){
 800049c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800049e:	ac08      	add	r4, sp, #32
 80004a0:	7825      	ldrb	r5, [r4, #0]
 80004a2:	ac09      	add	r4, sp, #36	; 0x24
 80004a4:	7824      	ldrb	r4, [r4, #0]
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	46a4      	mov	ip, r4

  uint8_t masks[4] = {(m1^m5), (m2^m6), (m3^m7), (m4^m8)};
 80004aa:	4663      	mov	r3, ip
void remask(uint8_t s[16], uint8_t m1, uint8_t m2, uint8_t m3, uint8_t m4, uint8_t m5, uint8_t m6, uint8_t m7, uint8_t m8){
 80004ac:	ac0a      	add	r4, sp, #40	; 0x28
 80004ae:	7827      	ldrb	r7, [r4, #0]
 80004b0:	ac0b      	add	r4, sp, #44	; 0x2c
 80004b2:	7826      	ldrb	r6, [r4, #0]
  uint8_t masks[4] = {(m1^m5), (m2^m6), (m3^m7), (m4^m8)};
 80004b4:	4059      	eors	r1, r3
 80004b6:	9b01      	ldr	r3, [sp, #4]
void remask(uint8_t s[16], uint8_t m1, uint8_t m2, uint8_t m3, uint8_t m4, uint8_t m5, uint8_t m6, uint8_t m7, uint8_t m8){
 80004b8:	ac0c      	add	r4, sp, #48	; 0x30
  uint8_t masks[4] = {(m1^m5), (m2^m6), (m3^m7), (m4^m8)};
 80004ba:	4073      	eors	r3, r6
 80004bc:	0006      	movs	r6, r0
void remask(uint8_t s[16], uint8_t m1, uint8_t m2, uint8_t m3, uint8_t m4, uint8_t m5, uint8_t m6, uint8_t m7, uint8_t m8){
 80004be:	7824      	ldrb	r4, [r4, #0]
  uint8_t masks[4] = {(m1^m5), (m2^m6), (m3^m7), (m4^m8)};
 80004c0:	407a      	eors	r2, r7
 80004c2:	4065      	eors	r5, r4
  int i;
	for(i = 0; i< 4; i++){
 80004c4:	3610      	adds	r6, #16
        s[0+i*4]  = s[0+i*4] ^ masks[0];
 80004c6:	7804      	ldrb	r4, [r0, #0]
 80004c8:	404c      	eors	r4, r1
 80004ca:	7004      	strb	r4, [r0, #0]
		s[1+i*4]	= s[1+i*4] ^ masks[1];
 80004cc:	7844      	ldrb	r4, [r0, #1]
 80004ce:	4054      	eors	r4, r2
 80004d0:	7044      	strb	r4, [r0, #1]
		s[2+i*4]	= s[2+i*4] ^ masks[2];
 80004d2:	7884      	ldrb	r4, [r0, #2]
 80004d4:	405c      	eors	r4, r3
 80004d6:	7084      	strb	r4, [r0, #2]
		s[3+i*4]	= s[3+i*4] ^ masks[3];
 80004d8:	78c4      	ldrb	r4, [r0, #3]
 80004da:	406c      	eors	r4, r5
 80004dc:	70c4      	strb	r4, [r0, #3]
	for(i = 0; i< 4; i++){
 80004de:	3004      	adds	r0, #4
 80004e0:	42b0      	cmp	r0, r6
 80004e2:	d1f0      	bne.n	80004c6 <remask+0x2a>
	}
}
 80004e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80004e6:	0000      	movs	r0, r0

080004e8 <calcMixColMask>:


//PRECALCULATIONS:
//Yuan
void calcMixColMask(){
 80004e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
//  * [w]      [2  3  1  1]    [a]
//  * [x]  =   [1  2  3  1]  * [b]
//  * [y]      [1  1  2  3]    [c]
//  * [z]      [3  1  1  2]    [d]

	Mask[6]	=	mul_02[Mask[0]]	^ mul_03[Mask[1]]   ^Mask[2]	^Mask[3];
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <calcMixColMask+0x54>)
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <calcMixColMask+0x58>)
 80004ee:	789f      	ldrb	r7, [r3, #2]
 80004f0:	781d      	ldrb	r5, [r3, #0]
 80004f2:	003e      	movs	r6, r7
 80004f4:	78dc      	ldrb	r4, [r3, #3]
 80004f6:	5d50      	ldrb	r0, [r2, r5]
 80004f8:	4066      	eors	r6, r4
 80004fa:	7859      	ldrb	r1, [r3, #1]
 80004fc:	4070      	eors	r0, r6
 80004fe:	4e11      	ldr	r6, [pc, #68]	; (8000544 <calcMixColMask+0x5c>)
 8000500:	9201      	str	r2, [sp, #4]
 8000502:	5c72      	ldrb	r2, [r6, r1]
 8000504:	4050      	eors	r0, r2
 8000506:	7198      	strb	r0, [r3, #6]
	Mask[7]	=	Mask[0]	^ mul_02[Mask[1]]	^mul_03[Mask[2]]	^Mask[3];
 8000508:	0028      	movs	r0, r5
 800050a:	4060      	eors	r0, r4
 800050c:	4684      	mov	ip, r0
 800050e:	9a01      	ldr	r2, [sp, #4]
 8000510:	5c50      	ldrb	r0, [r2, r1]
 8000512:	4662      	mov	r2, ip
 8000514:	4050      	eors	r0, r2
 8000516:	5df2      	ldrb	r2, [r6, r7]
 8000518:	4050      	eors	r0, r2
 800051a:	71d8      	strb	r0, [r3, #7]
	Mask[8]	=	Mask[0]	^ Mask[1]	^mul_02[Mask[2]]	^mul_03[Mask[3]];
 800051c:	0028      	movs	r0, r5
 800051e:	9a01      	ldr	r2, [sp, #4]
 8000520:	4048      	eors	r0, r1
 8000522:	5dd2      	ldrb	r2, [r2, r7]
	Mask[9]	=	mul_03[Mask[0]]	^ Mask[1]	^Mask[2]	^mul_02[Mask[3]];
 8000524:	4079      	eors	r1, r7
	Mask[8]	=	Mask[0]	^ Mask[1]	^mul_02[Mask[2]]	^mul_03[Mask[3]];
 8000526:	4050      	eors	r0, r2
 8000528:	5d32      	ldrb	r2, [r6, r4]
 800052a:	4050      	eors	r0, r2
	Mask[9]	=	mul_03[Mask[0]]	^ Mask[1]	^Mask[2]	^mul_02[Mask[3]];
 800052c:	9a01      	ldr	r2, [sp, #4]
	Mask[8]	=	Mask[0]	^ Mask[1]	^mul_02[Mask[2]]	^mul_03[Mask[3]];
 800052e:	7218      	strb	r0, [r3, #8]
	Mask[9]	=	mul_03[Mask[0]]	^ Mask[1]	^Mask[2]	^mul_02[Mask[3]];
 8000530:	5d70      	ldrb	r0, [r6, r5]
 8000532:	5d12      	ldrb	r2, [r2, r4]
 8000534:	4041      	eors	r1, r0
 8000536:	404a      	eors	r2, r1
 8000538:	725a      	strb	r2, [r3, #9]

}
 800053a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800053c:	20000004 	.word	0x20000004
 8000540:	08001388 	.word	0x08001388
 8000544:	08001288 	.word	0x08001288

08000548 <calcSbox_masked>:
void calcSbox_masked(){
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}

	//precalculate the needed Sbox to change from Mask m to Maks m'
	int cnt;
    for(cnt=0;cnt<256;cnt++){
		Sbox_masked[cnt^Mask[4]] = sbox[cnt]^Mask[5];
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <calcSbox_masked+0x24>)
    for(cnt=0;cnt<256;cnt++){
 800054c:	2180      	movs	r1, #128	; 0x80
		Sbox_masked[cnt^Mask[4]] = sbox[cnt]^Mask[5];
 800054e:	795d      	ldrb	r5, [r3, #5]
 8000550:	791f      	ldrb	r7, [r3, #4]
    for(cnt=0;cnt<256;cnt++){
 8000552:	2300      	movs	r3, #0
		Sbox_masked[cnt^Mask[4]] = sbox[cnt]^Mask[5];
 8000554:	4c06      	ldr	r4, [pc, #24]	; (8000570 <calcSbox_masked+0x28>)
 8000556:	4e07      	ldr	r6, [pc, #28]	; (8000574 <calcSbox_masked+0x2c>)
    for(cnt=0;cnt<256;cnt++){
 8000558:	0049      	lsls	r1, r1, #1
		Sbox_masked[cnt^Mask[4]] = sbox[cnt]^Mask[5];
 800055a:	0038      	movs	r0, r7
 800055c:	5cf2      	ldrb	r2, [r6, r3]
 800055e:	4058      	eors	r0, r3
 8000560:	406a      	eors	r2, r5
    for(cnt=0;cnt<256;cnt++){
 8000562:	3301      	adds	r3, #1
		Sbox_masked[cnt^Mask[4]] = sbox[cnt]^Mask[5];
 8000564:	5422      	strb	r2, [r4, r0]
    for(cnt=0;cnt<256;cnt++){
 8000566:	428b      	cmp	r3, r1
 8000568:	d1f7      	bne.n	800055a <calcSbox_masked+0x12>
	}
}
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	20000004 	.word	0x20000004
 8000570:	20000174 	.word	0x20000174
 8000574:	08001587 	.word	0x08001587

08000578 <init_masked_round_keys>:
void init_masked_round_keys(){
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}

	//	2nd-9th RK Mask m' to Mask m1-m4

    int i;
	for(i = 0; i<10;i++){
 800057a:	2600      	movs	r6, #0
void init_masked_round_keys(){
 800057c:	b087      	sub	sp, #28
		remask(RoundKey_masked[i],Mask[6],Mask[7],Mask[8],Mask[9],Mask[4]^WordMask[0],Mask[4]^WordMask[1],Mask[4]^WordMask[2],Mask[4]^WordMask[3]);
 800057e:	4c18      	ldr	r4, [pc, #96]	; (80005e0 <init_masked_round_keys+0x68>)
 8000580:	4f18      	ldr	r7, [pc, #96]	; (80005e4 <init_masked_round_keys+0x6c>)
 8000582:	0130      	lsls	r0, r6, #4
 8000584:	7925      	ldrb	r5, [r4, #4]
 8000586:	19c0      	adds	r0, r0, r7
 8000588:	7be7      	ldrb	r7, [r4, #15]
 800058a:	7a23      	ldrb	r3, [r4, #8]
 800058c:	406f      	eors	r7, r5
 800058e:	79e2      	ldrb	r2, [r4, #7]
 8000590:	79a1      	ldrb	r1, [r4, #6]
 8000592:	9704      	str	r7, [sp, #16]
 8000594:	7ba7      	ldrb	r7, [r4, #14]
	for(i = 0; i<10;i++){
 8000596:	3601      	adds	r6, #1
		remask(RoundKey_masked[i],Mask[6],Mask[7],Mask[8],Mask[9],Mask[4]^WordMask[0],Mask[4]^WordMask[1],Mask[4]^WordMask[2],Mask[4]^WordMask[3]);
 8000598:	406f      	eors	r7, r5
 800059a:	9703      	str	r7, [sp, #12]
 800059c:	7b67      	ldrb	r7, [r4, #13]
 800059e:	406f      	eors	r7, r5
 80005a0:	9702      	str	r7, [sp, #8]
 80005a2:	7b27      	ldrb	r7, [r4, #12]
 80005a4:	407d      	eors	r5, r7
 80005a6:	9501      	str	r5, [sp, #4]
 80005a8:	7a65      	ldrb	r5, [r4, #9]
 80005aa:	9500      	str	r5, [sp, #0]
 80005ac:	f7ff ff76 	bl	800049c <remask>
	for(i = 0; i<10;i++){
 80005b0:	2e0a      	cmp	r6, #10
 80005b2:	d1e4      	bne.n	800057e <init_masked_round_keys+0x6>
	}

	//1st RK Mask m' to 0
	remask(RoundKey_masked[10],0,0,0,0,Mask[5]^WordMask[0],Mask[5]^WordMask[1],Mask[5]^WordMask[2],Mask[5]^WordMask[3]);
 80005b4:	2100      	movs	r1, #0
 80005b6:	7963      	ldrb	r3, [r4, #5]
 80005b8:	7be2      	ldrb	r2, [r4, #15]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <init_masked_round_keys+0x70>)
 80005bc:	405a      	eors	r2, r3
 80005be:	9204      	str	r2, [sp, #16]
 80005c0:	7ba2      	ldrb	r2, [r4, #14]
 80005c2:	405a      	eors	r2, r3
 80005c4:	9203      	str	r2, [sp, #12]
 80005c6:	7b62      	ldrb	r2, [r4, #13]
 80005c8:	405a      	eors	r2, r3
 80005ca:	9202      	str	r2, [sp, #8]
 80005cc:	7b22      	ldrb	r2, [r4, #12]
 80005ce:	9100      	str	r1, [sp, #0]
 80005d0:	4053      	eors	r3, r2
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	000a      	movs	r2, r1
 80005d6:	000b      	movs	r3, r1
 80005d8:	f7ff ff60 	bl	800049c <remask>
}
 80005dc:	b007      	add	sp, #28
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	20000004 	.word	0x20000004
 80005e4:	200000c4 	.word	0x200000c4
 80005e8:	20000164 	.word	0x20000164

080005ec <copy_key>:
void copy_key(){
 80005ec:	b510      	push	{r4, lr}
	//copy the right roundkeys to masked key array

	uint8_t i,j;
	for(i=0;i<11;i++){
		for(j=0;j<16;j++){
			RoundKey_masked[i][j] = roundKey[i*16+j];
 80005ee:	22b0      	movs	r2, #176	; 0xb0
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <copy_key+0x10>)
 80005f2:	4903      	ldr	r1, [pc, #12]	; (8000600 <copy_key+0x14>)
 80005f4:	f000 fe32 	bl	800125c <memcpy>
		}
	}
}
 80005f8:	bd10      	pop	{r4, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	200000c4 	.word	0x200000c4
 8000600:	20000014 	.word	0x20000014

08000604 <init_masking>:
void init_masking(){
 8000604:	b510      	push	{r4, lr}
	copy_key();
 8000606:	f7ff fff1 	bl	80005ec <copy_key>

	//Calculates: m1',m2',m3',m4'
	calcMixColMask();
 800060a:	f7ff ff6d 	bl	80004e8 <calcMixColMask>
	calcSbox_masked();
 800060e:	f7ff ff9b 	bl	8000548 <calcSbox_masked>
	init_masked_round_keys();
 8000612:	f7ff ffb1 	bl	8000578 <init_masked_round_keys>

}
 8000616:	bd10      	pop	{r4, pc}

08000618 <randomize_mask>:
void randomize_mask()
{
 8000618:	b510      	push	{r4, lr}
    randbyte(&Mask[0]);
 800061a:	4c12      	ldr	r4, [pc, #72]	; (8000664 <randomize_mask+0x4c>)
 800061c:	0020      	movs	r0, r4
 800061e:	f7ff fdcc 	bl	80001ba <randbyte>
    randbyte(&Mask[1]);
 8000622:	1c60      	adds	r0, r4, #1
 8000624:	f7ff fdc9 	bl	80001ba <randbyte>
    randbyte(&Mask[2]);
 8000628:	1ca0      	adds	r0, r4, #2
 800062a:	f7ff fdc6 	bl	80001ba <randbyte>
    randbyte(&Mask[3]);
 800062e:	1ce0      	adds	r0, r4, #3
 8000630:	f7ff fdc3 	bl	80001ba <randbyte>
    randbyte(&Mask[4]);
 8000634:	1d20      	adds	r0, r4, #4
 8000636:	f7ff fdc0 	bl	80001ba <randbyte>
    randbyte(&Mask[5]);
 800063a:	1d60      	adds	r0, r4, #5
 800063c:	f7ff fdbd 	bl	80001ba <randbyte>
    randbyte(&WordMask[0]);
 8000640:	0020      	movs	r0, r4
 8000642:	300c      	adds	r0, #12
 8000644:	f7ff fdb9 	bl	80001ba <randbyte>
    randbyte(&WordMask[1]);
 8000648:	0020      	movs	r0, r4
 800064a:	300d      	adds	r0, #13
 800064c:	f7ff fdb5 	bl	80001ba <randbyte>
    randbyte(&WordMask[2]);
 8000650:	0020      	movs	r0, r4
 8000652:	300e      	adds	r0, #14
 8000654:	f7ff fdb1 	bl	80001ba <randbyte>
    randbyte(&WordMask[3]);
 8000658:	0020      	movs	r0, r4
 800065a:	300f      	adds	r0, #15
 800065c:	f7ff fdad 	bl	80001ba <randbyte>
}
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000004 	.word	0x20000004

08000668 <subBytes_masked>:


void subBytes_masked(uint8_t state[16]){
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	2300      	movs	r3, #0

    uint8_t i;
    for (i = 0; i < 16; i++) {
        state[i] = Sbox_masked[state[i] ^ WordMask[i % 4]] ^ WordMask[i % 4];
 800066c:	2603      	movs	r6, #3
 800066e:	4d07      	ldr	r5, [pc, #28]	; (800068c <subBytes_masked+0x24>)
 8000670:	4c07      	ldr	r4, [pc, #28]	; (8000690 <subBytes_masked+0x28>)
 8000672:	001a      	movs	r2, r3
 8000674:	4032      	ands	r2, r6
 8000676:	18aa      	adds	r2, r5, r2
 8000678:	7b12      	ldrb	r2, [r2, #12]
 800067a:	5cc1      	ldrb	r1, [r0, r3]
 800067c:	4051      	eors	r1, r2
 800067e:	5c61      	ldrb	r1, [r4, r1]
 8000680:	404a      	eors	r2, r1
 8000682:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < 16; i++) {
 8000684:	3301      	adds	r3, #1
 8000686:	2b10      	cmp	r3, #16
 8000688:	d1f3      	bne.n	8000672 <subBytes_masked+0xa>
    }
    
}
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	20000004 	.word	0x20000004
 8000690:	20000174 	.word	0x20000174

08000694 <maskstate>:

void maskstate(uint8_t* state)
{
 8000694:	b530      	push	{r4, r5, lr}
    remask(state,Mask[6],Mask[7],Mask[8],Mask[9],0,0,0,0);
 8000696:	2500      	movs	r5, #0
 8000698:	4c07      	ldr	r4, [pc, #28]	; (80006b8 <maskstate+0x24>)
{
 800069a:	b087      	sub	sp, #28
    remask(state,Mask[6],Mask[7],Mask[8],Mask[9],0,0,0,0);
 800069c:	7a23      	ldrb	r3, [r4, #8]
 800069e:	79e2      	ldrb	r2, [r4, #7]
 80006a0:	79a1      	ldrb	r1, [r4, #6]
 80006a2:	9504      	str	r5, [sp, #16]
 80006a4:	9503      	str	r5, [sp, #12]
 80006a6:	9502      	str	r5, [sp, #8]
 80006a8:	9501      	str	r5, [sp, #4]
 80006aa:	7a64      	ldrb	r4, [r4, #9]
 80006ac:	9400      	str	r4, [sp, #0]
 80006ae:	f7ff fef5 	bl	800049c <remask>
}
 80006b2:	b007      	add	sp, #28
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000004 	.word	0x20000004

080006bc <aes128>:
void aes128(uint8_t* state)
{
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	0005      	movs	r5, r0
 80006c0:	b086      	sub	sp, #24
    asm volatile ("cpsid i" : : : "memory");
 80006c2:	b672      	cpsid	i

    trigger_high();
 80006c4:	f000 f994 	bl	80009f0 <trigger_high>

    addRoundKey_masked(state, 0);
 80006c8:	2100      	movs	r1, #0
 80006ca:	0028      	movs	r0, r5
 80006cc:	f7ff fed6 	bl	800047c <addRoundKey_masked>
    uint8_t i=1,j=0;
#ifdef TEST_AES
    for (i = 1; i <10; i++) {
#endif

        subBytes_masked(state);
 80006d0:	0028      	movs	r0, r5
 80006d2:	f7ff ffc9 	bl	8000668 <subBytes_masked>

        shiftRows(state);
 80006d6:	0028      	movs	r0, r5
 80006d8:	f7ff feb6 	bl	8000448 <shiftRows>
        
        remask(state,Mask[0],Mask[1],Mask[2],Mask[3],Mask[5]^WordMask[0],Mask[5]^WordMask[1],Mask[5]^WordMask[2],Mask[5]^WordMask[3]);
 80006dc:	4c10      	ldr	r4, [pc, #64]	; (8000720 <aes128+0x64>)
 80006de:	7960      	ldrb	r0, [r4, #5]
 80006e0:	7be6      	ldrb	r6, [r4, #15]
 80006e2:	78a3      	ldrb	r3, [r4, #2]
 80006e4:	4046      	eors	r6, r0
 80006e6:	7862      	ldrb	r2, [r4, #1]
 80006e8:	7821      	ldrb	r1, [r4, #0]
 80006ea:	9604      	str	r6, [sp, #16]
 80006ec:	7ba6      	ldrb	r6, [r4, #14]
 80006ee:	4046      	eors	r6, r0
 80006f0:	9603      	str	r6, [sp, #12]
 80006f2:	7b66      	ldrb	r6, [r4, #13]
 80006f4:	4046      	eors	r6, r0
 80006f6:	9602      	str	r6, [sp, #8]
 80006f8:	7b26      	ldrb	r6, [r4, #12]
 80006fa:	4070      	eors	r0, r6
 80006fc:	9001      	str	r0, [sp, #4]
 80006fe:	78e0      	ldrb	r0, [r4, #3]
 8000700:	9000      	str	r0, [sp, #0]
 8000702:	0028      	movs	r0, r5
 8000704:	f7ff feca 	bl	800049c <remask>
    
        mixColumns(state);
 8000708:	0028      	movs	r0, r5
 800070a:	f7ff fe67 	bl	80003dc <mixColumns>
    
        addRoundKey_masked(state, i);
 800070e:	2101      	movs	r1, #1
 8000710:	0028      	movs	r0, r5
 8000712:	f7ff feb3 	bl	800047c <addRoundKey_masked>
    }
    subBytes_masked(state);
    shiftRows(state);
    addRoundKey_masked(state, 10);
#endif
    trigger_low();
 8000716:	f000 f973 	bl	8000a00 <trigger_low>
    asm volatile ("cpsie i" : : : "memory");
 800071a:	b662      	cpsie	i
}
 800071c:	b006      	add	sp, #24
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	20000004 	.word	0x20000004

08000724 <stack_clear>:
 */
void stack_clear()
{
    volatile uint8_t arr[1024];
    int i=0;
    for (i=0;i<1024;i++)
 8000724:	2300      	movs	r3, #0
 8000726:	2280      	movs	r2, #128	; 0x80
    {
        arr[i] = 0;
 8000728:	0019      	movs	r1, r3
{
 800072a:	b480      	push	{r7}
 800072c:	4f05      	ldr	r7, [pc, #20]	; (8000744 <stack_clear+0x20>)
    for (i=0;i<1024;i++)
 800072e:	00d2      	lsls	r2, r2, #3
{
 8000730:	44bd      	add	sp, r7
        arr[i] = 0;
 8000732:	4668      	mov	r0, sp
 8000734:	54c1      	strb	r1, [r0, r3]
    for (i=0;i<1024;i++)
 8000736:	3301      	adds	r3, #1
 8000738:	4293      	cmp	r3, r2
 800073a:	d1fa      	bne.n	8000732 <stack_clear+0xe>
    }
}
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <stack_clear+0x24>)
 800073e:	449d      	add	sp, r3
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	fffffbfc 	.word	0xfffffbfc
 8000748:	00000404 	.word	0x00000404

0800074c <run_byte_aes_masked_>:
    
    for(j=0;j<16;j++)
    {
        readrandombyte(&randombuf[j]);
    }*/
    for(j=0;j<16;j++)
 800074c:	2300      	movs	r3, #0
{
 800074e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        output[j] = inputbuf[j];
 8000750:	4c21      	ldr	r4, [pc, #132]	; (80007d8 <run_byte_aes_masked_+0x8c>)
 8000752:	5cc2      	ldrb	r2, [r0, r3]
 8000754:	54e2      	strb	r2, [r4, r3]
        key[j] = keybuf[j];
 8000756:	5ccd      	ldrb	r5, [r1, r3]
 8000758:	18e2      	adds	r2, r4, r3
    for(j=0;j<16;j++)
 800075a:	3301      	adds	r3, #1
        key[j] = keybuf[j];
 800075c:	7415      	strb	r5, [r2, #16]
    for(j=0;j<16;j++)
 800075e:	2b10      	cmp	r3, #16
 8000760:	d1f7      	bne.n	8000752 <run_byte_aes_masked_+0x6>
    }

    readrandombyte(&testthrowaway);
 8000762:	466b      	mov	r3, sp
 8000764:	1dd8      	adds	r0, r3, #7
 8000766:	f000 f8a1 	bl	80008ac <readrandombyte>
    readrandombyte(&testthrowaway);
 800076a:	466b      	mov	r3, sp
 800076c:	1dd8      	adds	r0, r3, #7
 800076e:	f000 f89d 	bl	80008ac <readrandombyte>
    readrandombyte(&testthrowaway);
 8000772:	466b      	mov	r3, sp
 8000774:	1dd8      	adds	r0, r3, #7
 8000776:	f000 f899 	bl	80008ac <readrandombyte>
    readrandombyte(&testthrowaway);
 800077a:	466b      	mov	r3, sp
 800077c:	1dd8      	adds	r0, r3, #7
 800077e:	f000 f895 	bl	80008ac <readrandombyte>
    readrandombyte(&testthrowaway);
 8000782:	466b      	mov	r3, sp
 8000784:	1dd8      	adds	r0, r3, #7
 8000786:	f000 f891 	bl	80008ac <readrandombyte>
    readrandombyte(&testthrowaway);
 800078a:	466b      	mov	r3, sp
 800078c:	1dd8      	adds	r0, r3, #7
 800078e:	f000 f88d 	bl	80008ac <readrandombyte>
    
    runrand();
 8000792:	f000 f86f 	bl	8000874 <runrand>
    
    KeyExpansion(key);
 8000796:	0020      	movs	r0, r4
 8000798:	3010      	adds	r0, #16
 800079a:	f7ff fdd7 	bl	800034c <KeyExpansion>

    randomize_mask();
 800079e:	f7ff ff3b 	bl	8000618 <randomize_mask>
    init_masking();
 80007a2:	f7ff ff2f 	bl	8000604 <init_masking>
    maskstate(output);
 80007a6:	0020      	movs	r0, r4
 80007a8:	f7ff ff74 	bl	8000694 <maskstate>
#ifdef __arm__ 
    // clear stack and clear all other registers (leaving out r7)
    // to remove any state held from previous runs
    asm volatile (
 80007ac:	f7ff ffba 	bl	8000724 <stack_clear>
 80007b0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80007b2:	1c20      	adds	r0, r4, #0
 80007b4:	2600      	movs	r6, #0
 80007b6:	2500      	movs	r5, #0
 80007b8:	2400      	movs	r4, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	f7ff ff7c 	bl	80006bc <aes128>
 80007c4:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
#else
    stack_clear();
    aes128(output);
#endif
    
    for(j=0;j<16;j++)
 80007c6:	2500      	movs	r5, #0
    {
        printbyte(&output[j]);
 80007c8:	1960      	adds	r0, r4, r5
    for(j=0;j<16;j++)
 80007ca:	3501      	adds	r5, #1
        printbyte(&output[j]);
 80007cc:	f7ff fd18 	bl	8000200 <printbyte>
    for(j=0;j<16;j++)
 80007d0:	2d10      	cmp	r5, #16
 80007d2:	d1f9      	bne.n	80007c8 <run_byte_aes_masked_+0x7c>
    }
        
}
 80007d4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000274 	.word	0x20000274

080007dc <simple_init>:
{
    int j=0;
    for(;j<16;j++)
    {
    }
}
 80007dc:	4770      	bx	lr
 80007de:	0000      	movs	r0, r0

080007e0 <simple_run>:


void simple_run()
{
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    }
*/

    
    for(i=0;i<NTRACES;i++)
 80007e2:	2600      	movs	r6, #0
 80007e4:	4c1e      	ldr	r4, [pc, #120]	; (8000860 <simple_run+0x80>)
    {
        
        if (i<TEST_TRACES)
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <simple_run+0x84>)
        {
            for (j=0;j<16;j++)
 80007e8:	2500      	movs	r5, #0
        if (i<TEST_TRACES)
 80007ea:	429e      	cmp	r6, r3
 80007ec:	dc20      	bgt.n	8000830 <simple_run+0x50>
            {
               
                output[j] = 0x00;
                readrandombyte(&key[j]);
 80007ee:	0020      	movs	r0, r4
                output[j] = 0x00;
 80007f0:	2300      	movs	r3, #0
                readrandombyte(&key[j]);
 80007f2:	3010      	adds	r0, #16
                output[j] = 0x00;
 80007f4:	5563      	strb	r3, [r4, r5]
                readrandombyte(&key[j]);
 80007f6:	1940      	adds	r0, r0, r5
 80007f8:	f000 f858 	bl	80008ac <readrandombyte>
                
                readrandombyte(&randombuf[j]);
 80007fc:	0020      	movs	r0, r4
 80007fe:	3020      	adds	r0, #32
 8000800:	1940      	adds	r0, r0, r5
 8000802:	f000 f853 	bl	80008ac <readrandombyte>
                
                input[j] = randombuf[j];
 8000806:	1c63      	adds	r3, r4, #1
 8000808:	195b      	adds	r3, r3, r5
 800080a:	7fdb      	ldrb	r3, [r3, #31]
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <simple_run+0x88>)
 800080e:	b2db      	uxtb	r3, r3
 8000810:	5553      	strb	r3, [r2, r5]
            for (j=0;j<16;j++)
 8000812:	3501      	adds	r5, #1
 8000814:	2d10      	cmp	r5, #16
 8000816:	d1ea      	bne.n	80007ee <simple_run+0xe>
        
                input[j] = fixedinput[j];
            }
        }
        
        run_byte_aes_masked_(input, key);
 8000818:	0021      	movs	r1, r4
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <simple_run+0x88>)
 800081c:	3110      	adds	r1, #16
 800081e:	f7ff ff95 	bl	800074c <run_byte_aes_masked_>
    for(i=0;i<NTRACES;i++)
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <simple_run+0x8c>)
 8000824:	3601      	adds	r6, #1
 8000826:	429e      	cmp	r6, r3
 8000828:	d1dd      	bne.n	80007e6 <simple_run+0x6>

    }


    endprogram();
 800082a:	f7ff fcf0 	bl	800020e <endprogram>

}
 800082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                output[j] = 0x00;
 8000830:	0027      	movs	r7, r4
 8000832:	2300      	movs	r3, #0
 8000834:	3720      	adds	r7, #32
 8000836:	197f      	adds	r7, r7, r5
 8000838:	5563      	strb	r3, [r4, r5]
                readrandombyte(&randombuf[j]);
 800083a:	0038      	movs	r0, r7
 800083c:	f000 f836 	bl	80008ac <readrandombyte>
                readrandombyte(&randombuf[j]);
 8000840:	0038      	movs	r0, r7
 8000842:	f000 f833 	bl	80008ac <readrandombyte>
                key[j] = fixedkey[j];
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <simple_run+0x90>)
 8000848:	1962      	adds	r2, r4, r5
 800084a:	5ce9      	ldrb	r1, [r5, r3]
                input[j] = fixedinput[j];
 800084c:	3310      	adds	r3, #16
 800084e:	5ceb      	ldrb	r3, [r5, r3]
                key[j] = fixedkey[j];
 8000850:	7411      	strb	r1, [r2, #16]
                input[j] = fixedinput[j];
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <simple_run+0x88>)
 8000854:	5553      	strb	r3, [r2, r5]
            for (j=0;j<16;j++)
 8000856:	3501      	adds	r5, #1
 8000858:	2d10      	cmp	r5, #16
 800085a:	d1e9      	bne.n	8000830 <simple_run+0x50>
 800085c:	e7dc      	b.n	8000818 <simple_run+0x38>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	20000274 	.word	0x20000274
 8000864:	0000270f 	.word	0x0000270f
 8000868:	200002a4 	.word	0x200002a4
 800086c:	00004e20 	.word	0x00004e20
 8000870:	08001687 	.word	0x08001687

08000874 <runrand>:
{
	ui32randval = 0;
}

void runrand()
{
 8000874:	b510      	push	{r4, lr}
	uint8_t *rr=(uint8_t*)&ui32randval;
	randbyte(&rr[0]);
 8000876:	4c0c      	ldr	r4, [pc, #48]	; (80008a8 <runrand+0x34>)
 8000878:	0020      	movs	r0, r4
 800087a:	3010      	adds	r0, #16
 800087c:	f7ff fc9d 	bl	80001ba <randbyte>
	randbyte(&rr[2]);
 8000880:	0020      	movs	r0, r4
 8000882:	3012      	adds	r0, #18
 8000884:	f7ff fc99 	bl	80001ba <randbyte>
	randbyte(&rr[1]);
 8000888:	0020      	movs	r0, r4
 800088a:	3011      	adds	r0, #17
 800088c:	f7ff fc95 	bl	80001ba <randbyte>
	randbyte(&rr[3]);
 8000890:	0020      	movs	r0, r4
 8000892:	3013      	adds	r0, #19
 8000894:	f7ff fc91 	bl	80001ba <randbyte>
#ifdef __arm__
	asm("mov r7, %[value]" 
 8000898:	6923      	ldr	r3, [r4, #16]
 800089a:	1c1f      	adds	r7, r3, #0
		:
		: [value] "r" (ui32randval));
#endif
	randbyte(&ui8randval);
 800089c:	0020      	movs	r0, r4
 800089e:	3014      	adds	r0, #20
 80008a0:	f7ff fc8b 	bl	80001ba <randbyte>

}
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000384 	.word	0x20000384

080008ac <readrandombyte>:
void readrandombyte(unsigned char* byte)
{
 80008ac:	b510      	push	{r4, lr}
    randbyte(byte);
 80008ae:	f7ff fc84 	bl	80001ba <randbyte>
}
 80008b2:	bd10      	pop	{r4, pc}

080008b4 <main>:

void simple_init();
void simple_run();

int main(void)
{
 80008b4:	b510      	push	{r4, lr}
    platform_init();
 80008b6:	f000 f80a 	bl	80008ce <platform_init>
    init_uart();
 80008ba:	f000 f835 	bl	8000928 <init_uart>
    trigger_setup();
 80008be:	f000 f873 	bl	80009a8 <trigger_setup>

    simple_init();
 80008c2:	f7ff ff8b 	bl	80007dc <simple_init>
	simple_run();
 80008c6:	f7ff ff8b 	bl	80007e0 <simple_run>
    
    return 0;
}
 80008ca:	2000      	movs	r0, #0
 80008cc:	bd10      	pop	{r4, pc}

080008ce <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80008ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008d0:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 80008d2:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80008d4:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80008d6:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 80008d8:	2304      	movs	r3, #4
{
 80008da:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008dc:	05ff      	lsls	r7, r7, #23
 80008de:	0038      	movs	r0, r7
 80008e0:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 80008e2:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80008e4:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 80008e6:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80008e8:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008ea:	f000 fb03 	bl	8000ef4 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 80008ee:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008f0:	a905      	add	r1, sp, #20
 80008f2:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 80008f4:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80008f6:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 80008f8:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80008fa:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008fc:	f000 fafa 	bl	8000ef4 <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000900:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000902:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000904:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000906:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000908:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800090a:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800090c:	f000 f888 	bl	8000a20 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000910:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000912:	0021      	movs	r1, r4
 8000914:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000916:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000918:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800091a:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800091e:	f000 fa5f 	bl	8000de0 <HAL_RCC_ClockConfig>
#endif
}
 8000922:	b017      	add	sp, #92	; 0x5c
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	0000      	movs	r0, r0

08000928 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	2280      	movs	r2, #128	; 0x80
{
 800092a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4c1b      	ldr	r4, [pc, #108]	; (800099c <init_uart+0x74>)
 800092e:	0292      	lsls	r2, r2, #10
 8000930:	6963      	ldr	r3, [r4, #20]
{
 8000932:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4313      	orrs	r3, r2
 8000936:	6163      	str	r3, [r4, #20]
 8000938:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800093a:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4013      	ands	r3, r2
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000942:	23c0      	movs	r3, #192	; 0xc0
 8000944:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 8000946:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000948:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800094a:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800094e:	a903      	add	r1, sp, #12
 8000950:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000952:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 8000954:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 8000956:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000958:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800095a:	f000 facb 	bl	8000ef4 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	69a3      	ldr	r3, [r4, #24]
 8000962:	01d2      	lsls	r2, r2, #7
 8000964:	4313      	orrs	r3, r2
 8000966:	61a3      	str	r3, [r4, #24]
 8000968:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 800096c:	4013      	ands	r3, r2
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8000972:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000974:	43b3      	bics	r3, r6
 8000976:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 800097a:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 800097c:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_0
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 800097e:	2396      	movs	r3, #150	; 0x96
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	6043      	str	r3, [r0, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000984:	2300      	movs	r3, #0
 8000986:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000988:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800098a:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800098c:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800098e:	330c      	adds	r3, #12
 8000990:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 8000992:	f000 fbe7 	bl	8001164 <HAL_UART_Init>
}
 8000996:	b008      	add	sp, #32
 8000998:	bd70      	pop	{r4, r5, r6, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40021000 	.word	0x40021000
 80009a0:	2000039c 	.word	0x2000039c
 80009a4:	40013800 	.word	0x40013800

080009a8 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <trigger_setup+0x44>)
{
 80009ac:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	0289      	lsls	r1, r1, #10
 80009b2:	430a      	orrs	r2, r1
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	695b      	ldr	r3, [r3, #20]
{
 80009b8:	b086      	sub	sp, #24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	400b      	ands	r3, r1
 80009bc:	9300      	str	r3, [sp, #0]
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009be:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
	GpioInit.Pin       = GPIO_PIN_7;
 80009c4:	2580      	movs	r5, #128	; 0x80
	GpioInit.Pull      = GPIO_NOPULL;
 80009c6:	2600      	movs	r6, #0
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009c8:	05e4      	lsls	r4, r4, #23
 80009ca:	0020      	movs	r0, r4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80009cc:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009ce:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009d0:	3302      	adds	r3, #2
 80009d2:	9304      	str	r3, [sp, #16]
	GpioInit.Pin       = GPIO_PIN_7;
 80009d4:	9501      	str	r5, [sp, #4]
	GpioInit.Pull      = GPIO_NOPULL;
 80009d6:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009d8:	f000 fa8c 	bl	8000ef4 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80009dc:	0032      	movs	r2, r6
 80009de:	0029      	movs	r1, r5
 80009e0:	0020      	movs	r0, r4
 80009e2:	f000 fb39 	bl	8001058 <HAL_GPIO_WritePin>
}
 80009e6:	b006      	add	sp, #24
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40021000 	.word	0x40021000

080009f0 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80009f0:	2090      	movs	r0, #144	; 0x90
{
 80009f2:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	05c0      	lsls	r0, r0, #23
 80009fa:	f000 fb2d 	bl	8001058 <HAL_GPIO_WritePin>
}
 80009fe:	bd10      	pop	{r4, pc}

08000a00 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000a00:	2090      	movs	r0, #144	; 0x90
{
 8000a02:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	05c0      	lsls	r0, r0, #23
 8000a0a:	f000 fb25 	bl	8001058 <HAL_GPIO_WritePin>
}   
 8000a0e:	bd10      	pop	{r4, pc}

08000a10 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <HAL_GetTick+0xc>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	1c42      	adds	r2, r0, #1
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	2000040c 	.word	0x2000040c

08000a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a22:	6803      	ldr	r3, [r0, #0]
{
 8000a24:	0004      	movs	r4, r0
 8000a26:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a28:	07db      	lsls	r3, r3, #31
 8000a2a:	d42f      	bmi.n	8000a8c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	079b      	lsls	r3, r3, #30
 8000a30:	d500      	bpl.n	8000a34 <HAL_RCC_OscConfig+0x14>
 8000a32:	e081      	b.n	8000b38 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	071b      	lsls	r3, r3, #28
 8000a38:	d500      	bpl.n	8000a3c <HAL_RCC_OscConfig+0x1c>
 8000a3a:	e0bc      	b.n	8000bb6 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	075b      	lsls	r3, r3, #29
 8000a40:	d500      	bpl.n	8000a44 <HAL_RCC_OscConfig+0x24>
 8000a42:	e0df      	b.n	8000c04 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	06db      	lsls	r3, r3, #27
 8000a48:	d51a      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a4a:	6962      	ldr	r2, [r4, #20]
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	4db4      	ldr	r5, [pc, #720]	; (8000d20 <HAL_RCC_OscConfig+0x300>)
 8000a50:	2a01      	cmp	r2, #1
 8000a52:	d000      	beq.n	8000a56 <HAL_RCC_OscConfig+0x36>
 8000a54:	e148      	b.n	8000ce8 <HAL_RCC_OscConfig+0x2c8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a56:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a58:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000a5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a60:	431a      	orrs	r2, r3
 8000a62:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a64:	f7ff ffd4 	bl	8000a10 <HAL_GetTick>
 8000a68:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a6c:	423b      	tst	r3, r7
 8000a6e:	d100      	bne.n	8000a72 <HAL_RCC_OscConfig+0x52>
 8000a70:	e133      	b.n	8000cda <HAL_RCC_OscConfig+0x2ba>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a72:	21f8      	movs	r1, #248	; 0xf8
 8000a74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a76:	69a3      	ldr	r3, [r4, #24]
 8000a78:	438a      	bics	r2, r1
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a80:	6a21      	ldr	r1, [r4, #32]
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d000      	beq.n	8000a88 <HAL_RCC_OscConfig+0x68>
 8000a86:	e157      	b.n	8000d38 <HAL_RCC_OscConfig+0x318>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e013      	b.n	8000ab4 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a8c:	220c      	movs	r2, #12
 8000a8e:	4da4      	ldr	r5, [pc, #656]	; (8000d20 <HAL_RCC_OscConfig+0x300>)
 8000a90:	686b      	ldr	r3, [r5, #4]
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d006      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a98:	686b      	ldr	r3, [r5, #4]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b08      	cmp	r3, #8
 8000a9e:	d10b      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x98>
 8000aa0:	686b      	ldr	r3, [r5, #4]
 8000aa2:	03db      	lsls	r3, r3, #15
 8000aa4:	d508      	bpl.n	8000ab8 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	039b      	lsls	r3, r3, #14
 8000aaa:	d5bf      	bpl.n	8000a2c <HAL_RCC_OscConfig+0xc>
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1bc      	bne.n	8000a2c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ab2:	2001      	movs	r0, #1
}
 8000ab4:	b005      	add	sp, #20
 8000ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab8:	6863      	ldr	r3, [r4, #4]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d113      	bne.n	8000ae6 <HAL_RCC_OscConfig+0xc6>
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	682a      	ldr	r2, [r5, #0]
 8000ac2:	025b      	lsls	r3, r3, #9
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ac8:	f7ff ffa2 	bl	8000a10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000acc:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ace:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad0:	02bf      	lsls	r7, r7, #10
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	423b      	tst	r3, r7
 8000ad6:	d1a9      	bne.n	8000a2c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad8:	f7ff ff9a 	bl	8000a10 <HAL_GetTick>
 8000adc:	1b80      	subs	r0, r0, r6
 8000ade:	2864      	cmp	r0, #100	; 0x64
 8000ae0:	d9f7      	bls.n	8000ad2 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e7e6      	b.n	8000ab4 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d116      	bne.n	8000b18 <HAL_RCC_OscConfig+0xf8>
 8000aea:	682b      	ldr	r3, [r5, #0]
 8000aec:	4a8d      	ldr	r2, [pc, #564]	; (8000d24 <HAL_RCC_OscConfig+0x304>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aee:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af0:	4013      	ands	r3, r2
 8000af2:	602b      	str	r3, [r5, #0]
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	4a8c      	ldr	r2, [pc, #560]	; (8000d28 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afa:	4013      	ands	r3, r2
 8000afc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000afe:	f7ff ff87 	bl	8000a10 <HAL_GetTick>
 8000b02:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	423b      	tst	r3, r7
 8000b08:	d100      	bne.n	8000b0c <HAL_RCC_OscConfig+0xec>
 8000b0a:	e78f      	b.n	8000a2c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff ff80 	bl	8000a10 <HAL_GetTick>
 8000b10:	1b80      	subs	r0, r0, r6
 8000b12:	2864      	cmp	r0, #100	; 0x64
 8000b14:	d9f6      	bls.n	8000b04 <HAL_RCC_OscConfig+0xe4>
 8000b16:	e7e4      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b18:	2b05      	cmp	r3, #5
 8000b1a:	d105      	bne.n	8000b28 <HAL_RCC_OscConfig+0x108>
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	682a      	ldr	r2, [r5, #0]
 8000b20:	02db      	lsls	r3, r3, #11
 8000b22:	4313      	orrs	r3, r2
 8000b24:	602b      	str	r3, [r5, #0]
 8000b26:	e7ca      	b.n	8000abe <HAL_RCC_OscConfig+0x9e>
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	4a7e      	ldr	r2, [pc, #504]	; (8000d24 <HAL_RCC_OscConfig+0x304>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	602b      	str	r3, [r5, #0]
 8000b30:	682b      	ldr	r3, [r5, #0]
 8000b32:	4a7d      	ldr	r2, [pc, #500]	; (8000d28 <HAL_RCC_OscConfig+0x308>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	e7c6      	b.n	8000ac6 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b38:	220c      	movs	r2, #12
 8000b3a:	4d79      	ldr	r5, [pc, #484]	; (8000d20 <HAL_RCC_OscConfig+0x300>)
 8000b3c:	686b      	ldr	r3, [r5, #4]
 8000b3e:	4213      	tst	r3, r2
 8000b40:	d006      	beq.n	8000b50 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b42:	686b      	ldr	r3, [r5, #4]
 8000b44:	4013      	ands	r3, r2
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d110      	bne.n	8000b6c <HAL_RCC_OscConfig+0x14c>
 8000b4a:	686b      	ldr	r3, [r5, #4]
 8000b4c:	03db      	lsls	r3, r3, #15
 8000b4e:	d40d      	bmi.n	8000b6c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	079b      	lsls	r3, r3, #30
 8000b54:	d502      	bpl.n	8000b5c <HAL_RCC_OscConfig+0x13c>
 8000b56:	68e3      	ldr	r3, [r4, #12]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d1aa      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5c:	21f8      	movs	r1, #248	; 0xf8
 8000b5e:	682a      	ldr	r2, [r5, #0]
 8000b60:	6923      	ldr	r3, [r4, #16]
 8000b62:	438a      	bics	r2, r1
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	602b      	str	r3, [r5, #0]
 8000b6a:	e763      	b.n	8000a34 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b6c:	68e2      	ldr	r2, [r4, #12]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	d00f      	beq.n	8000b94 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000b74:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b76:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b7c:	f7ff ff48 	bl	8000a10 <HAL_GetTick>
 8000b80:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	423b      	tst	r3, r7
 8000b86:	d1e9      	bne.n	8000b5c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b88:	f7ff ff42 	bl	8000a10 <HAL_GetTick>
 8000b8c:	1b80      	subs	r0, r0, r6
 8000b8e:	2802      	cmp	r0, #2
 8000b90:	d9f7      	bls.n	8000b82 <HAL_RCC_OscConfig+0x162>
 8000b92:	e7a6      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000b94:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b96:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000b98:	439a      	bics	r2, r3
 8000b9a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff ff38 	bl	8000a10 <HAL_GetTick>
 8000ba0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	423b      	tst	r3, r7
 8000ba6:	d100      	bne.n	8000baa <HAL_RCC_OscConfig+0x18a>
 8000ba8:	e744      	b.n	8000a34 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000baa:	f7ff ff31 	bl	8000a10 <HAL_GetTick>
 8000bae:	1b80      	subs	r0, r0, r6
 8000bb0:	2802      	cmp	r0, #2
 8000bb2:	d9f6      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x182>
 8000bb4:	e795      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bb6:	69e2      	ldr	r2, [r4, #28]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4d59      	ldr	r5, [pc, #356]	; (8000d20 <HAL_RCC_OscConfig+0x300>)
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d010      	beq.n	8000be2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000bc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bc8:	f7ff ff22 	bl	8000a10 <HAL_GetTick>
 8000bcc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bd0:	423b      	tst	r3, r7
 8000bd2:	d000      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x1b6>
 8000bd4:	e732      	b.n	8000a3c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bd6:	f7ff ff1b 	bl	8000a10 <HAL_GetTick>
 8000bda:	1b80      	subs	r0, r0, r6
 8000bdc:	2802      	cmp	r0, #2
 8000bde:	d9f6      	bls.n	8000bce <HAL_RCC_OscConfig+0x1ae>
 8000be0:	e77f      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000be2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000be4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000be6:	439a      	bics	r2, r3
 8000be8:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bea:	f7ff ff11 	bl	8000a10 <HAL_GetTick>
 8000bee:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bf2:	423b      	tst	r3, r7
 8000bf4:	d100      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1d8>
 8000bf6:	e721      	b.n	8000a3c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bf8:	f7ff ff0a 	bl	8000a10 <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d9f6      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x1d0>
 8000c02:	e76e      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c04:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c06:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c08:	4d45      	ldr	r5, [pc, #276]	; (8000d20 <HAL_RCC_OscConfig+0x300>)
 8000c0a:	0552      	lsls	r2, r2, #21
 8000c0c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c0e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c10:	4213      	tst	r3, r2
 8000c12:	d108      	bne.n	8000c26 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c14:	69eb      	ldr	r3, [r5, #28]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61eb      	str	r3, [r5, #28]
 8000c1a:	69eb      	ldr	r3, [r5, #28]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	9303      	str	r3, [sp, #12]
 8000c20:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000c22:	2301      	movs	r3, #1
 8000c24:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c26:	2780      	movs	r7, #128	; 0x80
 8000c28:	4e40      	ldr	r6, [pc, #256]	; (8000d2c <HAL_RCC_OscConfig+0x30c>)
 8000c2a:	007f      	lsls	r7, r7, #1
 8000c2c:	6833      	ldr	r3, [r6, #0]
 8000c2e:	423b      	tst	r3, r7
 8000c30:	d015      	beq.n	8000c5e <HAL_RCC_OscConfig+0x23e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c32:	68a3      	ldr	r3, [r4, #8]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d122      	bne.n	8000c7e <HAL_RCC_OscConfig+0x25e>
 8000c38:	6a2a      	ldr	r2, [r5, #32]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000c3e:	f7ff fee7 	bl	8000a10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c42:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000c44:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c46:	6a2b      	ldr	r3, [r5, #32]
 8000c48:	423b      	tst	r3, r7
 8000c4a:	d03f      	beq.n	8000ccc <HAL_RCC_OscConfig+0x2ac>
    if(pwrclkchanged == SET)
 8000c4c:	9b00      	ldr	r3, [sp, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d000      	beq.n	8000c54 <HAL_RCC_OscConfig+0x234>
 8000c52:	e6f7      	b.n	8000a44 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c54:	69eb      	ldr	r3, [r5, #28]
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <HAL_RCC_OscConfig+0x310>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61eb      	str	r3, [r5, #28]
 8000c5c:	e6f2      	b.n	8000a44 <HAL_RCC_OscConfig+0x24>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c5e:	6833      	ldr	r3, [r6, #0]
 8000c60:	433b      	orrs	r3, r7
 8000c62:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c64:	f7ff fed4 	bl	8000a10 <HAL_GetTick>
 8000c68:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c6a:	6833      	ldr	r3, [r6, #0]
 8000c6c:	423b      	tst	r3, r7
 8000c6e:	d1e0      	bne.n	8000c32 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c70:	f7ff fece 	bl	8000a10 <HAL_GetTick>
 8000c74:	9b01      	ldr	r3, [sp, #4]
 8000c76:	1ac0      	subs	r0, r0, r3
 8000c78:	2864      	cmp	r0, #100	; 0x64
 8000c7a:	d9f6      	bls.n	8000c6a <HAL_RCC_OscConfig+0x24a>
 8000c7c:	e731      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d114      	bne.n	8000cae <HAL_RCC_OscConfig+0x28e>
 8000c84:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c86:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c88:	4393      	bics	r3, r2
 8000c8a:	622b      	str	r3, [r5, #32]
 8000c8c:	6a2b      	ldr	r3, [r5, #32]
 8000c8e:	3203      	adds	r2, #3
 8000c90:	4393      	bics	r3, r2
 8000c92:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000c94:	f7ff febc 	bl	8000a10 <HAL_GetTick>
 8000c98:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c9a:	6a2b      	ldr	r3, [r5, #32]
 8000c9c:	423b      	tst	r3, r7
 8000c9e:	d0d5      	beq.n	8000c4c <HAL_RCC_OscConfig+0x22c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca0:	f7ff feb6 	bl	8000a10 <HAL_GetTick>
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <HAL_RCC_OscConfig+0x314>)
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	d9f6      	bls.n	8000c9a <HAL_RCC_OscConfig+0x27a>
 8000cac:	e719      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d105      	bne.n	8000cbe <HAL_RCC_OscConfig+0x29e>
 8000cb2:	6a29      	ldr	r1, [r5, #32]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	622b      	str	r3, [r5, #32]
 8000cba:	6a2b      	ldr	r3, [r5, #32]
 8000cbc:	e7bd      	b.n	8000c3a <HAL_RCC_OscConfig+0x21a>
 8000cbe:	6a2b      	ldr	r3, [r5, #32]
 8000cc0:	4393      	bics	r3, r2
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	622b      	str	r3, [r5, #32]
 8000cc6:	6a2b      	ldr	r3, [r5, #32]
 8000cc8:	4393      	bics	r3, r2
 8000cca:	e7b7      	b.n	8000c3c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fea0 	bl	8000a10 <HAL_GetTick>
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_RCC_OscConfig+0x314>)
 8000cd2:	1b80      	subs	r0, r0, r6
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	d9b6      	bls.n	8000c46 <HAL_RCC_OscConfig+0x226>
 8000cd8:	e703      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cda:	f7ff fe99 	bl	8000a10 <HAL_GetTick>
 8000cde:	1b80      	subs	r0, r0, r6
 8000ce0:	2802      	cmp	r0, #2
 8000ce2:	d800      	bhi.n	8000ce6 <HAL_RCC_OscConfig+0x2c6>
 8000ce4:	e6c1      	b.n	8000a6a <HAL_RCC_OscConfig+0x4a>
 8000ce6:	e6fc      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ce8:	3205      	adds	r2, #5
 8000cea:	d103      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000cec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000cee:	439a      	bics	r2, r3
 8000cf0:	636a      	str	r2, [r5, #52]	; 0x34
 8000cf2:	e6be      	b.n	8000a72 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cf4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cf6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cf8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000cfa:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cfc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000cfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d00:	4393      	bics	r3, r2
 8000d02:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d04:	f7ff fe84 	bl	8000a10 <HAL_GetTick>
 8000d08:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d0c:	423b      	tst	r3, r7
 8000d0e:	d100      	bne.n	8000d12 <HAL_RCC_OscConfig+0x2f2>
 8000d10:	e6b6      	b.n	8000a80 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d12:	f7ff fe7d 	bl	8000a10 <HAL_GetTick>
 8000d16:	1b80      	subs	r0, r0, r6
 8000d18:	2802      	cmp	r0, #2
 8000d1a:	d9f6      	bls.n	8000d0a <HAL_RCC_OscConfig+0x2ea>
 8000d1c:	e6e1      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000
 8000d24:	fffeffff 	.word	0xfffeffff
 8000d28:	fffbffff 	.word	0xfffbffff
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	efffffff 	.word	0xefffffff
 8000d34:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d38:	220c      	movs	r2, #12
 8000d3a:	4d26      	ldr	r5, [pc, #152]	; (8000dd4 <HAL_RCC_OscConfig+0x3b4>)
      return HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d3e:	686b      	ldr	r3, [r5, #4]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d100      	bne.n	8000d48 <HAL_RCC_OscConfig+0x328>
 8000d46:	e6b5      	b.n	8000ab4 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <HAL_RCC_OscConfig+0x3b8>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d50:	2902      	cmp	r1, #2
 8000d52:	d12f      	bne.n	8000db4 <HAL_RCC_OscConfig+0x394>
        tickstart = HAL_GetTick();
 8000d54:	f7ff fe5c 	bl	8000a10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d58:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d5a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d5c:	04bf      	lsls	r7, r7, #18
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	423b      	tst	r3, r7
 8000d62:	d121      	bne.n	8000da8 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d64:	220f      	movs	r2, #15
 8000d66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d68:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d6a:	4393      	bics	r3, r2
 8000d6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d6e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d70:	4313      	orrs	r3, r2
 8000d72:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d78:	686a      	ldr	r2, [r5, #4]
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	4917      	ldr	r1, [pc, #92]	; (8000ddc <HAL_RCC_OscConfig+0x3bc>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	4313      	orrs	r3, r2
 8000d82:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	682a      	ldr	r2, [r5, #0]
 8000d88:	045b      	lsls	r3, r3, #17
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fe3f 	bl	8000a10 <HAL_GetTick>
 8000d92:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	4233      	tst	r3, r6
 8000d98:	d000      	beq.n	8000d9c <HAL_RCC_OscConfig+0x37c>
 8000d9a:	e675      	b.n	8000a88 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d9c:	f7ff fe38 	bl	8000a10 <HAL_GetTick>
 8000da0:	1b00      	subs	r0, r0, r4
 8000da2:	2802      	cmp	r0, #2
 8000da4:	d9f6      	bls.n	8000d94 <HAL_RCC_OscConfig+0x374>
 8000da6:	e69c      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da8:	f7ff fe32 	bl	8000a10 <HAL_GetTick>
 8000dac:	1b80      	subs	r0, r0, r6
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9d5      	bls.n	8000d5e <HAL_RCC_OscConfig+0x33e>
 8000db2:	e696      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000db4:	f7ff fe2c 	bl	8000a10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dba:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dbc:	04b6      	lsls	r6, r6, #18
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	4233      	tst	r3, r6
 8000dc2:	d100      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x3a6>
 8000dc4:	e660      	b.n	8000a88 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc6:	f7ff fe23 	bl	8000a10 <HAL_GetTick>
 8000dca:	1b00      	subs	r0, r0, r4
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f6      	bls.n	8000dbe <HAL_RCC_OscConfig+0x39e>
 8000dd0:	e687      	b.n	8000ae2 <HAL_RCC_OscConfig+0xc2>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	feffffff 	.word	0xfeffffff
 8000ddc:	ffc2ffff 	.word	0xffc2ffff

08000de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de2:	2201      	movs	r2, #1
 8000de4:	4d3e      	ldr	r5, [pc, #248]	; (8000ee0 <HAL_RCC_ClockConfig+0x100>)
{
 8000de6:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de8:	682b      	ldr	r3, [r5, #0]
{
 8000dea:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dec:	4013      	ands	r3, r2
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d312      	bcc.n	8000e18 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	0793      	lsls	r3, r2, #30
 8000df6:	d419      	bmi.n	8000e2c <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000df8:	07d2      	lsls	r2, r2, #31
 8000dfa:	d41f      	bmi.n	8000e3c <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	682a      	ldr	r2, [r5, #0]
 8000e00:	401a      	ands	r2, r3
 8000e02:	42ba      	cmp	r2, r7
 8000e04:	d85d      	bhi.n	8000ec2 <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	075b      	lsls	r3, r3, #29
 8000e0a:	d461      	bmi.n	8000ed0 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8000e0c:	22e1      	movs	r2, #225	; 0xe1
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <HAL_RCC_ClockConfig+0x104>)
 8000e10:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000e12:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8000e14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	4013      	ands	r3, r2
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d0e4      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000e28:	2001      	movs	r0, #1
}
 8000e2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e2c:	20f0      	movs	r0, #240	; 0xf0
 8000e2e:	492e      	ldr	r1, [pc, #184]	; (8000ee8 <HAL_RCC_ClockConfig+0x108>)
 8000e30:	684b      	ldr	r3, [r1, #4]
 8000e32:	4383      	bics	r3, r0
 8000e34:	68a0      	ldr	r0, [r4, #8]
 8000e36:	4303      	orrs	r3, r0
 8000e38:	604b      	str	r3, [r1, #4]
 8000e3a:	e7dd      	b.n	8000df8 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e3c:	4e2a      	ldr	r6, [pc, #168]	; (8000ee8 <HAL_RCC_ClockConfig+0x108>)
 8000e3e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e40:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e42:	2a01      	cmp	r2, #1
 8000e44:	d11a      	bne.n	8000e7c <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	039b      	lsls	r3, r3, #14
 8000e48:	d5ee      	bpl.n	8000e28 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	6873      	ldr	r3, [r6, #4]
 8000e4e:	438b      	bics	r3, r1
 8000e50:	4313      	orrs	r3, r2
 8000e52:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e54:	f7ff fddc 	bl	8000a10 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e58:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000e5a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d115      	bne.n	8000e8c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e60:	220c      	movs	r2, #12
 8000e62:	6873      	ldr	r3, [r6, #4]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d0c8      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6a:	f7ff fdd1 	bl	8000a10 <HAL_GetTick>
 8000e6e:	9b01      	ldr	r3, [sp, #4]
 8000e70:	1ac0      	subs	r0, r0, r3
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_RCC_ClockConfig+0x10c>)
 8000e74:	4298      	cmp	r0, r3
 8000e76:	d9f3      	bls.n	8000e60 <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e7d6      	b.n	8000e2a <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e7c:	2a02      	cmp	r2, #2
 8000e7e:	d102      	bne.n	8000e86 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	d4e2      	bmi.n	8000e4a <HAL_RCC_ClockConfig+0x6a>
 8000e84:	e7d0      	b.n	8000e28 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	079b      	lsls	r3, r3, #30
 8000e88:	d4df      	bmi.n	8000e4a <HAL_RCC_ClockConfig+0x6a>
 8000e8a:	e7cd      	b.n	8000e28 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d012      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e90:	220c      	movs	r2, #12
 8000e92:	6873      	ldr	r3, [r6, #4]
 8000e94:	4213      	tst	r3, r2
 8000e96:	d0b1      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e98:	f7ff fdba 	bl	8000a10 <HAL_GetTick>
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	1ac0      	subs	r0, r0, r3
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_RCC_ClockConfig+0x10c>)
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	d9f4      	bls.n	8000e90 <HAL_RCC_ClockConfig+0xb0>
 8000ea6:	e7e7      	b.n	8000e78 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ea8:	f7ff fdb2 	bl	8000a10 <HAL_GetTick>
 8000eac:	9b01      	ldr	r3, [sp, #4]
 8000eae:	1ac0      	subs	r0, r0, r3
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_RCC_ClockConfig+0x10c>)
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	d8e0      	bhi.n	8000e78 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	6873      	ldr	r3, [r6, #4]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d1f3      	bne.n	8000ea8 <HAL_RCC_ClockConfig+0xc8>
 8000ec0:	e79c      	b.n	8000dfc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec2:	682a      	ldr	r2, [r5, #0]
 8000ec4:	439a      	bics	r2, r3
 8000ec6:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ec8:	682a      	ldr	r2, [r5, #0]
 8000eca:	421a      	tst	r2, r3
 8000ecc:	d09b      	beq.n	8000e06 <HAL_RCC_ClockConfig+0x26>
 8000ece:	e7ab      	b.n	8000e28 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_RCC_ClockConfig+0x108>)
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <HAL_RCC_ClockConfig+0x110>)
 8000ed4:	6853      	ldr	r3, [r2, #4]
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	68e1      	ldr	r1, [r4, #12]
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6053      	str	r3, [r2, #4]
 8000ede:	e795      	b.n	8000e0c <HAL_RCC_ClockConfig+0x2c>
 8000ee0:	40022000 	.word	0x40022000
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	00001388 	.word	0x00001388
 8000ef0:	fffff8ff 	.word	0xfffff8ff

08000ef4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8000ef4:	2300      	movs	r3, #0
{ 
 8000ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef8:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000efa:	680a      	ldr	r2, [r1, #0]
 8000efc:	0014      	movs	r4, r2
 8000efe:	40dc      	lsrs	r4, r3
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8000f02:	b007      	add	sp, #28
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f06:	2601      	movs	r6, #1
 8000f08:	0014      	movs	r4, r2
 8000f0a:	409e      	lsls	r6, r3
 8000f0c:	4034      	ands	r4, r6
 8000f0e:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8000f10:	4232      	tst	r2, r6
 8000f12:	d100      	bne.n	8000f16 <HAL_GPIO_Init+0x22>
 8000f14:	e092      	b.n	800103c <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f16:	684a      	ldr	r2, [r1, #4]
 8000f18:	0015      	movs	r5, r2
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	4395      	bics	r5, r2
 8000f20:	9503      	str	r5, [sp, #12]
 8000f22:	2d02      	cmp	r5, #2
 8000f24:	d10f      	bne.n	8000f46 <HAL_GPIO_Init+0x52>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f26:	2407      	movs	r4, #7
 8000f28:	250f      	movs	r5, #15
 8000f2a:	401c      	ands	r4, r3
 8000f2c:	00a4      	lsls	r4, r4, #2
 8000f2e:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	1882      	adds	r2, r0, r2
 8000f36:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f38:	43af      	bics	r7, r5
 8000f3a:	46bc      	mov	ip, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000f3c:	690f      	ldr	r7, [r1, #16]
 8000f3e:	40a7      	lsls	r7, r4
 8000f40:	4664      	mov	r4, ip
 8000f42:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000f44:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f46:	2203      	movs	r2, #3
 8000f48:	005c      	lsls	r4, r3, #1
 8000f4a:	40a2      	lsls	r2, r4
 8000f4c:	43d5      	mvns	r5, r2
 8000f4e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f52:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f54:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f56:	9a01      	ldr	r2, [sp, #4]
 8000f58:	402a      	ands	r2, r5
 8000f5a:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5c:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8000f62:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f64:	2d01      	cmp	r5, #1
 8000f66:	d80d      	bhi.n	8000f84 <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8000f6a:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f6e:	68ca      	ldr	r2, [r1, #12]
 8000f70:	40a2      	lsls	r2, r4
 8000f72:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8000f74:	6082      	str	r2, [r0, #8]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f76:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 8000f78:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f7a:	0912      	lsrs	r2, r2, #4
 8000f7c:	409a      	lsls	r2, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f7e:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f80:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000f82:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f84:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8000f86:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f88:	4015      	ands	r5, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f8a:	688a      	ldr	r2, [r1, #8]
 8000f8c:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f8e:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f90:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000f92:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f94:	9a01      	ldr	r2, [sp, #4]
 8000f96:	0564      	lsls	r4, r4, #21
 8000f98:	4222      	tst	r2, r4
 8000f9a:	d04f      	beq.n	800103c <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	2501      	movs	r5, #1
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <HAL_GPIO_Init+0x14c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa0:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa4:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	432c      	orrs	r4, r5
 8000fa8:	6194      	str	r4, [r2, #24]
 8000faa:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000fac:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	402a      	ands	r2, r5
 8000fb0:	9205      	str	r2, [sp, #20]
 8000fb2:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8000fb4:	4a23      	ldr	r2, [pc, #140]	; (8001044 <HAL_GPIO_Init+0x150>)
 8000fb6:	00a4      	lsls	r4, r4, #2
 8000fb8:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fba:	220f      	movs	r2, #15
 8000fbc:	3502      	adds	r5, #2
 8000fbe:	401d      	ands	r5, r3
 8000fc0:	00ad      	lsls	r5, r5, #2
 8000fc2:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8000fc4:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fc6:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc8:	2200      	movs	r2, #0
 8000fca:	42b8      	cmp	r0, r7
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_GPIO_Init+0xf4>
 8000fce:	4f1e      	ldr	r7, [pc, #120]	; (8001048 <HAL_GPIO_Init+0x154>)
 8000fd0:	3201      	adds	r2, #1
 8000fd2:	42b8      	cmp	r0, r7
 8000fd4:	d008      	beq.n	8000fe8 <HAL_GPIO_Init+0xf4>
 8000fd6:	4f1d      	ldr	r7, [pc, #116]	; (800104c <HAL_GPIO_Init+0x158>)
 8000fd8:	3201      	adds	r2, #1
 8000fda:	42b8      	cmp	r0, r7
 8000fdc:	d004      	beq.n	8000fe8 <HAL_GPIO_Init+0xf4>
 8000fde:	4f1c      	ldr	r7, [pc, #112]	; (8001050 <HAL_GPIO_Init+0x15c>)
 8000fe0:	3201      	adds	r2, #1
 8000fe2:	42b8      	cmp	r0, r7
 8000fe4:	d000      	beq.n	8000fe8 <HAL_GPIO_Init+0xf4>
 8000fe6:	3202      	adds	r2, #2
 8000fe8:	40aa      	lsls	r2, r5
 8000fea:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fec:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff0:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000ff2:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000ff4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff6:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ff8:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8000ffa:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffc:	03ff      	lsls	r7, r7, #15
 8000ffe:	d401      	bmi.n	8001004 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001000:	0035      	movs	r5, r6
 8001002:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001004:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001006:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8001008:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800100c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100e:	03bf      	lsls	r7, r7, #14
 8001010:	d401      	bmi.n	8001016 <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001012:	0035      	movs	r5, r6
 8001014:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001016:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001018:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 800101a:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101c:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800101e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001020:	02ff      	lsls	r7, r7, #11
 8001022:	d401      	bmi.n	8001028 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001024:	0035      	movs	r5, r6
 8001026:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001028:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800102a:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 800102c:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800102e:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8001030:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001032:	02bf      	lsls	r7, r7, #10
 8001034:	d401      	bmi.n	800103a <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001036:	4025      	ands	r5, r4
 8001038:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800103a:	60d6      	str	r6, [r2, #12]
    position++;
 800103c:	3301      	adds	r3, #1
 800103e:	e75c      	b.n	8000efa <HAL_GPIO_Init+0x6>
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001058:	2a00      	cmp	r2, #0
 800105a:	d001      	beq.n	8001060 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 800105e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001060:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8001062:	e7fc      	b.n	800105e <HAL_GPIO_WritePin+0x6>

08001064 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001064:	0003      	movs	r3, r0
 8001066:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800106c:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800106e:	432a      	orrs	r2, r5
 8001070:	695d      	ldr	r5, [r3, #20]
 8001072:	69c1      	ldr	r1, [r0, #28]
 8001074:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001076:	6820      	ldr	r0, [r4, #0]
 8001078:	4d33      	ldr	r5, [pc, #204]	; (8001148 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800107a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800107c:	4028      	ands	r0, r5
 800107e:	4302      	orrs	r2, r0
 8001080:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001082:	6862      	ldr	r2, [r4, #4]
 8001084:	4831      	ldr	r0, [pc, #196]	; (800114c <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001086:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001088:	4002      	ands	r2, r0
 800108a:	68d8      	ldr	r0, [r3, #12]
 800108c:	4302      	orrs	r2, r0
 800108e:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001090:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001092:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001094:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001096:	4d2e      	ldr	r5, [pc, #184]	; (8001150 <UART_SetConfig+0xec>)
 8001098:	4028      	ands	r0, r5
 800109a:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800109c:	2003      	movs	r0, #3
 800109e:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010a0:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <UART_SetConfig+0xf0>)
 80010a4:	022d      	lsls	r5, r5, #8
 80010a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010a8:	4002      	ands	r2, r0
 80010aa:	3a01      	subs	r2, #1
 80010ac:	2a02      	cmp	r2, #2
 80010ae:	d843      	bhi.n	8001138 <UART_SetConfig+0xd4>
 80010b0:	4829      	ldr	r0, [pc, #164]	; (8001158 <UART_SetConfig+0xf4>)
 80010b2:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010b4:	42a9      	cmp	r1, r5
 80010b6:	d120      	bne.n	80010fa <UART_SetConfig+0x96>
  {
    switch (clocksource)
 80010b8:	2808      	cmp	r0, #8
 80010ba:	d81b      	bhi.n	80010f4 <UART_SetConfig+0x90>
 80010bc:	f7ff f8d0 	bl	8000260 <__gnu_thumb1_case_uqi>
 80010c0:	1a051a3e 	.word	0x1a051a3e
 80010c4:	1a1a1a3e 	.word	0x1a1a1a3e
 80010c8:	15          	.byte	0x15
 80010c9:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <UART_SetConfig+0xf8>)
 80010ce:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010d0:	18c0      	adds	r0, r0, r3
 80010d2:	f7ff f8cf 	bl	8000274 <__udivsi3>
 80010d6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80010d8:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80010da:	0019      	movs	r1, r3
 80010dc:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010de:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 80010e0:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010e2:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80010e4:	430b      	orrs	r3, r1
 80010e6:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010ea:	6859      	ldr	r1, [r3, #4]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	0848      	lsrs	r0, r1, #1
 80010f0:	025b      	lsls	r3, r3, #9
 80010f2:	e7ed      	b.n	80010d0 <UART_SetConfig+0x6c>
    switch (clocksource)
 80010f4:	2001      	movs	r0, #1
 80010f6:	2300      	movs	r3, #0
 80010f8:	e7ef      	b.n	80010da <UART_SetConfig+0x76>
    switch (clocksource)
 80010fa:	2808      	cmp	r0, #8
 80010fc:	d81a      	bhi.n	8001134 <UART_SetConfig+0xd0>
 80010fe:	f7ff f8af 	bl	8000260 <__gnu_thumb1_case_uqi>
 8001102:	190f      	.short	0x190f
 8001104:	190f1905 	.word	0x190f1905
 8001108:	1919      	.short	0x1919
 800110a:	14          	.byte	0x14
 800110b:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <UART_SetConfig+0xfc>)
 8001110:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001112:	18c0      	adds	r0, r0, r3
 8001114:	f7ff f8ae 	bl	8000274 <__udivsi3>
 8001118:	b280      	uxth	r0, r0
 800111a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800111c:	2000      	movs	r0, #0
        break;
 800111e:	e7e3      	b.n	80010e8 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001120:	6859      	ldr	r1, [r3, #4]
 8001122:	23e1      	movs	r3, #225	; 0xe1
 8001124:	0848      	lsrs	r0, r1, #1
 8001126:	03db      	lsls	r3, r3, #15
 8001128:	e7f3      	b.n	8001112 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	0848      	lsrs	r0, r1, #1
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	e7ee      	b.n	8001112 <UART_SetConfig+0xae>
    switch (clocksource)
 8001134:	2001      	movs	r0, #1
  return ret;
 8001136:	e7d7      	b.n	80010e8 <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001138:	42a9      	cmp	r1, r5
 800113a:	d1f1      	bne.n	8001120 <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	23e1      	movs	r3, #225	; 0xe1
 8001140:	0848      	lsrs	r0, r1, #1
 8001142:	041b      	lsls	r3, r3, #16
 8001144:	e7c4      	b.n	80010d0 <UART_SetConfig+0x6c>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	ffff69f3 	.word	0xffff69f3
 800114c:	ffffcfff 	.word	0xffffcfff
 8001150:	fffff4ff 	.word	0xfffff4ff
 8001154:	40021000 	.word	0x40021000
 8001158:	080016a7 	.word	0x080016a7
 800115c:	01e84800 	.word	0x01e84800
 8001160:	00f42400 	.word	0x00f42400

08001164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001168:	d101      	bne.n	800116e <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 800116a:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 800116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800116e:	0006      	movs	r6, r0
 8001170:	3669      	adds	r6, #105	; 0x69
 8001172:	7833      	ldrb	r3, [r6, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 800117a:	0003      	movs	r3, r0
 800117c:	3368      	adds	r3, #104	; 0x68
 800117e:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001180:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001182:	2701      	movs	r7, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8001184:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 8001186:	6825      	ldr	r5, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001188:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	43bb      	bics	r3, r7
 800118e:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001190:	f7ff ff68 	bl	8001064 <UART_SetConfig>
 8001194:	42b8      	cmp	r0, r7
 8001196:	d0e8      	beq.n	800116a <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001198:	686b      	ldr	r3, [r5, #4]
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_UART_Init+0x60>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800119c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800119e:	4013      	ands	r3, r2
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80011a0:	2208      	movs	r2, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80011a2:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80011a4:	68ab      	ldr	r3, [r5, #8]
 80011a6:	4393      	bics	r3, r2
 80011a8:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 80011aa:	682b      	ldr	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80011ac:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 80011ae:	431f      	orrs	r7, r3
  huart->gState  = HAL_UART_STATE_READY;
 80011b0:	2320      	movs	r3, #32
  __HAL_UART_ENABLE(huart);
 80011b2:	602f      	str	r7, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80011b4:	326a      	adds	r2, #106	; 0x6a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011b6:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80011b8:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80011ba:	7033      	strb	r3, [r6, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80011bc:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80011be:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80011c0:	e7d4      	b.n	800116c <HAL_UART_Init+0x8>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	fffff7ff 	.word	0xfffff7ff

080011c8 <Reset_Handler>:
 80011c8:	2100      	movs	r1, #0
 80011ca:	e003      	b.n	80011d4 <LoopCopyDataInit>

080011cc <CopyDataInit>:
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LoopForever+0x2>)
 80011ce:	585b      	ldr	r3, [r3, r1]
 80011d0:	5043      	str	r3, [r0, r1]
 80011d2:	3104      	adds	r1, #4

080011d4 <LoopCopyDataInit>:
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <LoopForever+0x6>)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopForever+0xa>)
 80011d8:	1842      	adds	r2, r0, r1
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3f6      	bcc.n	80011cc <CopyDataInit>
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopForever+0xe>)
 80011e0:	e002      	b.n	80011e8 <LoopFillZerobss>

080011e2 <FillZerobss>:
 80011e2:	2300      	movs	r3, #0
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	3204      	adds	r2, #4

080011e8 <LoopFillZerobss>:
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <LoopForever+0x12>)
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3f9      	bcc.n	80011e2 <FillZerobss>
 80011ee:	e000      	b.n	80011f2 <LoopFillZerobss+0xa>
 80011f0:	bf00      	nop
 80011f2:	f000 f80f 	bl	8001214 <__libc_init_array>
 80011f6:	f7ff fb5d 	bl	80008b4 <main>

080011fa <LoopForever>:
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
 80011fc:	080016b4 	.word	0x080016b4
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004
 8001208:	20000004 	.word	0x20000004
 800120c:	2000042c 	.word	0x2000042c

08001210 <BusFault_Handler>:
 8001210:	e7fe      	b.n	8001210 <BusFault_Handler>
 8001212:	0000      	movs	r0, r0

08001214 <__libc_init_array>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2600      	movs	r6, #0
 8001218:	4d0c      	ldr	r5, [pc, #48]	; (800124c <__libc_init_array+0x38>)
 800121a:	4c0d      	ldr	r4, [pc, #52]	; (8001250 <__libc_init_array+0x3c>)
 800121c:	1b64      	subs	r4, r4, r5
 800121e:	10a4      	asrs	r4, r4, #2
 8001220:	42a6      	cmp	r6, r4
 8001222:	d109      	bne.n	8001238 <__libc_init_array+0x24>
 8001224:	2600      	movs	r6, #0
 8001226:	f000 f823 	bl	8001270 <_init>
 800122a:	4d0a      	ldr	r5, [pc, #40]	; (8001254 <__libc_init_array+0x40>)
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <__libc_init_array+0x44>)
 800122e:	1b64      	subs	r4, r4, r5
 8001230:	10a4      	asrs	r4, r4, #2
 8001232:	42a6      	cmp	r6, r4
 8001234:	d105      	bne.n	8001242 <__libc_init_array+0x2e>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	00b3      	lsls	r3, r6, #2
 800123a:	58eb      	ldr	r3, [r5, r3]
 800123c:	4798      	blx	r3
 800123e:	3601      	adds	r6, #1
 8001240:	e7ee      	b.n	8001220 <__libc_init_array+0xc>
 8001242:	00b3      	lsls	r3, r6, #2
 8001244:	58eb      	ldr	r3, [r5, r3]
 8001246:	4798      	blx	r3
 8001248:	3601      	adds	r6, #1
 800124a:	e7f2      	b.n	8001232 <__libc_init_array+0x1e>
 800124c:	080016ac 	.word	0x080016ac
 8001250:	080016ac 	.word	0x080016ac
 8001254:	080016ac 	.word	0x080016ac
 8001258:	080016b0 	.word	0x080016b0

0800125c <memcpy>:
 800125c:	2300      	movs	r3, #0
 800125e:	b510      	push	{r4, lr}
 8001260:	429a      	cmp	r2, r3
 8001262:	d100      	bne.n	8001266 <memcpy+0xa>
 8001264:	bd10      	pop	{r4, pc}
 8001266:	5ccc      	ldrb	r4, [r1, r3]
 8001268:	54c4      	strb	r4, [r0, r3]
 800126a:	3301      	adds	r3, #1
 800126c:	e7f8      	b.n	8001260 <memcpy+0x4>
 800126e:	0000      	movs	r0, r0

08001270 <_init>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001276:	bc08      	pop	{r3}
 8001278:	469e      	mov	lr, r3
 800127a:	4770      	bx	lr

0800127c <_fini>:
 800127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001282:	bc08      	pop	{r3}
 8001284:	469e      	mov	lr, r3
 8001286:	4770      	bx	lr
